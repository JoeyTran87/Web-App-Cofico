

Try the new cross-platform PowerShell https://aka.ms/pscore6

PS C:\Users\USER\Documents\GitHub\cofico\cofico\FROM BIM MASTER TEMP 210412\Python> & "c:/Program Files (x86)/IronPython 2.7/ipy64.exe" "c:/Users/USER/Documents/GitHub/cofico/cofico/FROM BIM MASTER TEMP 210412/Python/pythonDynamo/testProtoGeometry.py"
C:\Program Files\Autodesk\Revit 2020\AddIns\DynamoForRevit\ProtoGeometry.dll
Help on built-in module clr:

NAME
    clr - module()

FILE
    (built-in)

CLASSES
    __builtin__.List[Assembly](__builtin__.object)
        ReferencesList
    __builtin__.PythonTypeSlot(__builtin__.object)
        RuntimeArgChecker
        RuntimeReturnChecker
    __builtin__.object
        ArgChecker
        ReturnChecker

    class ArgChecker(__builtin__.object)
     |  ArgChecker(prms: Array[object])
     |
     |  Methods defined here:
     |
     |  __call__(...)
     |      x.__call__(...) <==> x(...)
     |
     |  __new__(...)
     |      __new__(cls: type, prms: Array[object])
     |
     |  __repr__(...)
     |      __repr__(self: object) -> str

    class ReferencesList(__builtin__.List[Assembly])
     |  ReferencesList()
     |
     |  Method resolution order:
     |      ReferencesList
     |      __builtin__.List[Assembly]
     |      __builtin__.object
     |      __builtin__.IList[Assembly]
     |      __builtin__.ICollection
     |      __builtin__.IReadOnlyList[Assembly]
     |      __builtin__.IReadOnlyCollection[Assembly]
     |      __builtin__.ICodeFormattable
     |
     |  Methods defined here:
     |
     |  Add(...)
     |      Add(self: ReferencesList, other: Assembly)
     |
     |  __add__(...)
     |      x.__add__(y) <==> x+yx.__add__(y) <==> x+y
     |
     |  __iter__(...)
     |      __iter__(self: IEnumerable) -> object
     |
     |  __repr__(...)
     |      __repr__(self: ReferencesList) -> str
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from __builtin__.List[Assembly]:
     |
     |  AddRange(...)
     |      AddRange(self: List[Assembly], collection: IEnumerable[Assembly])
     |
     |  AsReadOnly(...)
     |      AsReadOnly(self: List[Assembly]) -> ReadOnlyCollection[Assembly]
     |
     |  BinarySearch(...)
     |      BinarySearch(self: List[Assembly], item: Assembly, comparer: IComparer[Assembly]) -> int
     |      BinarySearch(self: List[Assembly], item: Assembly) -> int
     |      BinarySearch(self: List[Assembly], index: int, count: int, item: Assembly, comparer: IComparer[Assembly]) -> int
     |
     |  Clear(...)
     |      Clear(self: List[Assembly])
     |
     |  Contains(...)
     |      Contains(self: List[Assembly], item: Assembly) -> bool
     |
     |  ConvertAll(...)
     |      ConvertAll[TOutput](self: List[Assembly], converter: Converter[Assembly, TOutput]) -> List[TOutput]
     |
     |  CopyTo(...)
     |      CopyTo(self: List[Assembly], array: Array[Assembly], arrayIndex: int)CopyTo(self: List[Assembly], index: int, array: Array[Assembly], arrayIndex: int, count: int)CopyTo(self: List[Assembly], array: Array[Assembly])
     |
     |  Exists(...)
     |      Exists(self: List[Assembly], match: Predicate[Assembly]) -> bool
     |
     |  Find(...)
     |      Find(self: List[Assembly], match: Predicate[Assembly]) -> Assembly
     |
     |  FindAll(...)
     |      FindAll(self: List[Assembly], match: Predicate[Assembly]) -> List[Assembly]
     |
     |  FindIndex(...)
     |      FindIndex(self: List[Assembly], startIndex: int, count: int, match: Predicate[Assembly]) -> int
     |      FindIndex(self: List[Assembly], startIndex: int, match: Predicate[Assembly]) -> int
     |      FindIndex(self: List[Assembly], match: Predicate[Assembly]) -> int
     |
     |  FindLast(...)
     |      FindLast(self: List[Assembly], match: Predicate[Assembly]) -> Assembly
     |
     |  FindLastIndex(...)
     |      FindLastIndex(self: List[Assembly], startIndex: int, count: int, match: Predicate[Assembly]) -> int
     |      FindLastIndex(self: List[Assembly], startIndex: int, match: Predicate[Assembly]) -> int
     |      FindLastIndex(self: List[Assembly], match: Predicate[Assembly]) -> int
     |
     |  ForEach(...)
     |      ForEach(self: List[Assembly], action: Action[Assembly])
     |
     |  GetEnumerator(...)
     |      GetEnumerator(self: List[Assembly]) -> Enumerator
     |
     |  GetRange(...)
     |      GetRange(self: List[Assembly], index: int, count: int) -> List[Assembly]
     |
     |  IndexOf(...)
     |      IndexOf(self: List[Assembly], item: Assembly, index: int, count: int) -> int
     |      IndexOf(self: List[Assembly], item: Assembly, index: int) -> int
     |      IndexOf(self: List[Assembly], item: Assembly) -> int
     |
     |  Insert(...)
     |      Insert(self: List[Assembly], index: int, item: Assembly)
     |
     |  InsertRange(...)
     |      InsertRange(self: List[Assembly], index: int, collection: IEnumerable[Assembly])
     |
     |  LastIndexOf(...)
     |      LastIndexOf(self: List[Assembly], item: Assembly, index: int, count: int) -> int
     |      LastIndexOf(self: List[Assembly], item: Assembly, index: int) -> int
     |      LastIndexOf(self: List[Assembly], item: Assembly) -> int
     |
     |  Remove(...)
     |      Remove(self: List[Assembly], item: Assembly) -> bool
     |
     |  RemoveAll(...)
     |      RemoveAll(self: List[Assembly], match: Predicate[Assembly]) -> int
     |
     |  RemoveAt(...)
     |      RemoveAt(self: List[Assembly], index: int)
     |
     |  RemoveRange(...)
     |      RemoveRange(self: List[Assembly], index: int, count: int)
     |
     |  Reverse(...)
     |      Reverse(self: List[Assembly], index: int, count: int)Reverse(self: List[Assembly])
     |
     |  Sort(...)
     |      Sort(self: List[Assembly], index: int, count: int, comparer: IComparer[Assembly])Sort(self: List[Assembly], comparison: Comparison[Assembly])Sort(self: List[Assembly])Sort(self: List[Assembly], comparer: IComparer[Assembly])
     |
     |  ToArray(...)
     |      ToArray(self: List[Assembly]) -> Array[Assembly]
     |
     |  TrimExcess(...)
     |      TrimExcess(self: List[Assembly])
     |
     |  TrueForAll(...)
     |      TrueForAll(self: List[Assembly], match: Predicate[Assembly]) -> bool
     |
     |  __getitem__(...)
     |      x.__getitem__(y) <==> x[y]
     |
     |  __len__(...)
     |      x.__len__() <==> len(x)
     |
     |  __new__(...)
     |      __new__(cls: type)
     |      __new__(cls: type, capacity: int)
     |      __new__(cls: type, collection: IEnumerable[Assembly])
     |
     |  __reduce_ex__(...)
     |      helper for pickle
     |
     |  __setitem__(...)
     |      x.__setitem__(i, y) <==> x[i]=
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from __builtin__.List[Assembly]:
     |
     |  Capacity
     |      Get: Capacity(self: List[Assembly]) -> int
     |
     |      Set: Capacity(self: List[Assembly]) = value
     |
     |  Count
     |      Get: Count(self: List[Assembly]) -> int
     |
     |  ----------------------------------------------------------------------
     |  Data and other attributes inherited from __builtin__.List[Assembly]:
     |
     |  Enumerator = <type 'Enumerator'>
     |
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from __builtin__.ICollection:
     |
     |  IsSynchronized
     |      Get: IsSynchronized(self: ICollection) -> bool
     |
     |  SyncRoot
     |      Get: SyncRoot(self: ICollection) -> object
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors inherited from __builtin__.ICollection[Assembly]:
     |
     |  IsReadOnly
     |      Get: IsReadOnly(self: ICollection[Assembly]) -> bool

    class ReturnChecker(__builtin__.object)
     |  ReturnChecker(returnType: object)
     |
     |  Methods defined here:
     |
     |  __call__(...)
     |      x.__call__(...) <==> x(...)
     |
     |  __new__(...)
     |      __new__(cls: type, returnType: object)
     |
     |  __repr__(...)
     |      __repr__(self: object) -> str
     |
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |
     |  retType

    class RuntimeArgChecker(__builtin__.PythonTypeSlot)
     |  RuntimeArgChecker(function: object, expectedArgs: Array[object])
     |  RuntimeArgChecker(instance: object, function: object, expectedArgs: Array[object])
     |
     |  Method resolution order:
     |      RuntimeArgChecker
     |      __builtin__.PythonTypeSlot
     |      __builtin__.object
     |
     |  Methods defined here:
     |
     |  __call__(...)
     |      x.__call__(...) <==> x(...)x.__call__(...) <==> x(...)
     |
     |  __new__(...)
     |      __new__(cls: type, function: object, expectedArgs: Array[object])
     |      __new__(cls: type, instance: object, function: object, expectedArgs: Array[object])
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from __builtin__.PythonTypeSlot:
     |
     |  __get__(...)
     |      __get__(self: PythonTypeSlot, instance: object, typeContext: object) -> object
     |      __get__(self: PythonProperty_2$2, instance: object, owner: object) -> object

    class RuntimeReturnChecker(__builtin__.PythonTypeSlot)
     |  RuntimeReturnChecker(function: object, expectedReturn: object)
     |  RuntimeReturnChecker(instance: object, function: object, expectedReturn: object)
     |
     |  Method resolution order:
     |      RuntimeReturnChecker
     |      __builtin__.PythonTypeSlot
     |      __builtin__.object
     |
     |  Methods defined here:
     |
     |  GetAttribute(...)
     |      GetAttribute(self: RuntimeReturnChecker, instance: object, owner: object) -> object
     |
     |  __call__(...)
     |      x.__call__(...) <==> x(...)x.__call__(...) <==> x(...)
     |
     |  __new__(...)
     |      __new__(cls: type, function: object, expectedReturn: object)
     |      __new__(cls: type, instance: object, function: object, expectedReturn: object)
     |
     |  ----------------------------------------------------------------------
     |  Methods inherited from __builtin__.PythonTypeSlot:
     |
     |  __get__(...)
     |      __get__(self: PythonTypeSlot, instance: object, typeContext: object) -> object
     |      __get__(self: PythonProperty_2$2, instance: object, owner: object) -> object

FUNCTIONS
    AddReference(...)
        Adds a reference to a .NET assembly.  Parameters can be an already loaded
        Assembly object, a full assembly name, or a partial assembly name. After the
        load the assemblies namespaces and top-level types will be available via
        import Namespace.

    AddReferenceByName(...)
        Adds a reference to a .NET assembly.  Parameters are an assembly name.
        After the load the assemblies namespaces and top-level types will be available via
        import Namespace.

    AddReferenceByPartialName(...)
        Adds a reference to a .NET assembly.  Parameters are a partial assembly name.
        After the load the assemblies namespaces and top-level types will be available via
        import Namespace.

    AddReferenceToFile(...)
        Adds a reference to a .NET assembly.  One or more assembly names can
        be provided.  The assembly is searched for in the directories specified in
        sys.path and dependencies will be loaded from sys.path as well.  The assembly
        name should be the filename on disk without a directory specifier and
        optionally including the .EXE or .DLL extension. After the load the assemblies
        namespaces and top-level types will be available via import Namespace.

    AddReferenceToFileAndPath(...)
        Adds a reference to a .NET assembly.  One or more assembly names can
        be provided which are fully qualified names to the file on disk.  The
        directory is added to sys.path and AddReferenceToFile is then called. After the
        load the assemblies namespaces and top-level types will be available via
        import Namespace.

    AddReferenceToTypeLibrary(...)
        AddReferenceToTypeLibrary(rcw: object)AddReferenceToTypeLibrary(typeLibGuid: Guid)

    ClearProfilerData(...)
        ClearProfilerData()

    CompileModules(...)
        CompileModules(assemblyName: str, **kwArgs: IDictionary[str, object], *filenames: Array[str])

    CompileSubclassTypes(...)
        CompileSubclassTypes(assemblyName: str, *newTypes: Array[object])

    Convert(...)
        Convert(o: object, toType: Type) -> object

    Deserialize(...)
        Deserialize(serializationFormat: str, data: str) -> object

    Dir(...)
        Dir(o: object) -> list

    DirClr(...)
        DirClr(o: object) -> list

    EnableProfiler(...)
        EnableProfiler(enable: bool)

    GetClrType(...)
        GetClrType(type: Type) -> Type

    GetCurrentRuntime(...)
        GetCurrentRuntime() -> ScriptDomainManager

    GetDynamicType(...)
        GetDynamicType(t: Type) -> type

    GetProfilerData(...)
        GetProfilerData(includeUnused: bool) -> tuple

    GetPythonType(...)
        GetPythonType(t: Type) -> type

    GetSubclassedTypes(...)
        GetSubclassedTypes() -> tuple

    ImportExtensions(...)
        ImportExtensions(namespace: namespace#)ImportExtensions(type: type)

    LoadAssemblyByName(...)
        Loads an assembly from the specified assembly name and returns the assembly
        object.  Namespaces or types in the assembly can be accessed directly from
        the assembly object.

    LoadAssemblyByPartialName(...)
        Loads an assembly from the specified partial assembly name and returns the
        assembly object.  Namespaces or types in the assembly can be accessed directly
        from the assembly object.

    LoadAssemblyFromFile(...)
        Loads an assembly from the specified filename and returns the assembly
        object.  Namespaces or types in the assembly can be accessed directly from
        the assembly object.

    LoadAssemblyFromFileWithPath(...)
        Adds a reference to a .NET assembly.  Parameters are a full path to an. 
        assembly on disk. After the load the assemblies namespaces and top-level types
        will be available via import Namespace.

    LoadTypeLibrary(...)
        LoadTypeLibrary(rcw: object) -> ComTypeLibInfo
        LoadTypeLibrary(typeLibGuid: Guid) -> ComTypeLibInfo

    Self(...)
        Self() -> object

    Serialize(...)
        Serialize(self: object) -> tuple

    SetCommandDispatcher(...)
        SetCommandDispatcher(dispatcher: Action[Action]) -> Action[Action]

    Use(...)
        Use(name: str) -> object
        Use(path: str, language: str) -> object

    accepts(...)
        accepts(*types: Array[object]) -> object

    returns(...)
        returns(type: object) -> object

DATA
    References = (<mscorlib, Version=4.0.0.0, Culture=neutral, Pu...0.2396...


None