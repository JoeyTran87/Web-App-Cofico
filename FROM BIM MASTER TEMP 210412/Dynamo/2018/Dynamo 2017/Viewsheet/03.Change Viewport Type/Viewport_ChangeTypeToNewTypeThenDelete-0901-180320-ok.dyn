<Workspace Version="0.9.1.4062" X="4733.30772073038" Y="-2724.64272016494" zoom="1.05902133414671" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="36a7fd07-e977-4524-bba2-b62928b70478" type="PythonNodeModels.PythonNode" nickname="Python Script" x="-3879.46074839453" y="2666.54616427045" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" inputcount="3">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
clr.AddReference('RevitAPIUI')
from Autodesk.Revit.UI import TaskDialog
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *
clr.ImportExtensions(Revit.GeometryConversion)

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

import sys
import System

#The inputs to this node will be stored as a list in the IN variables.
dataEnteringNode = IN
sampeVp = UnwrapElement(IN[0])
bechangedVp = UnwrapElement(IN[1])

allCurrentSheets = FilteredElementCollector(doc).OfClass(ViewSheet).WhereElementIsNotElementType().ToElements()


allvpids = []
viewports=[]
typeIds = []
elemTypeS=[]
typenames = []

validtypes= []

resultviewports = []

sampleVPid = sampeVp.GetTypeId()
bechangedVPid = bechangedVp.GetTypeId()

listBechangedVPid = []
listBechangedVPid.append(bechangedVPid)

beDelVPId = listBechangedVPid[:]
 
for sheet in allCurrentSheets:
	vpIds = sheet.GetAllViewports()
	allvpids.append(vpIds)
for vpids in allvpids:
	for id in vpids:
		viewport = doc.GetElement(id)
		viewports.append(viewport)
		
for vp in viewports:
	typeId = vp.GetTypeId()
	typeIds.append(typeId)
for id in typeIds:
	elem = doc.GetElement(id)
	elemTypeS.append(elem)
	
#define a transaction variable and describe the transactio
# Start Transaction
TransactionManager.Instance.EnsureInTransaction(doc)
try:
	for vp in viewports:
		if vp.GetTypeId() == bechangedVPid:
			resultviewports.append(vp)
			vp.ChangeTypeId(sampleVPid)
except:
	pass
# End Transaction
TransactionManager.Instance.TransactionTaskDone()
doc.Regenerate()

result = "Number of Changed Viewport Types: "+len(resultviewports).ToString()
#Assign your output to the OUT variable.
OUT = result, beDelVPId</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Nodes.DSModelElementSelection guid="9e6c319f-6cdd-489d-9875-7de136ed006d" type="Dynamo.Nodes.DSModelElementSelection" nickname="Change to" x="-4314.92038409828" y="2577.14919690529" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" />
    <Dynamo.Nodes.DSModelElementSelection guid="4909c617-107b-4793-a145-0588e6dd6602" type="Dynamo.Nodes.DSModelElementSelection" nickname="Be changed" x="-4313.6840044199" y="2703.4194714896" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <instance id="b8033ab3-a578-489f-a17c-f91f1cdf0ad8-00c0cdf8" />
    </Dynamo.Nodes.DSModelElementSelection>
    <CoreNodeModels.Input.BoolSelector guid="6d8564ac-afaf-4ab1-a430-c3e5e786b27e" type="CoreNodeModels.Input.BoolSelector" nickname="Delete Type ? Yes = True" x="-4308.11332297725" y="2906.53390406272" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false">
      <System.Boolean>True</System.Boolean>
    </CoreNodeModels.Input.BoolSelector>
    <PythonNodeModels.PythonNode guid="2658e5b3-44a9-4896-bd87-c30728625c97" type="PythonNodeModels.PythonNode" nickname="Python Script" x="-3528.54249021075" y="2829.4659885445" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" inputcount="2">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
clr.AddReference('RevitAPIUI')
from Autodesk.Revit.UI import TaskDialog
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *
clr.ImportExtensions(Revit.GeometryConversion)

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

import sys
import System

#The inputs to this node will be stored as a list in the IN variables.
dataEnteringNode = IN
boolDel = IN[0]
bechangedVPid = IN[1]
	
#define a transaction variable and describe the transactio
# Start Transaction
TransactionManager.Instance.EnsureInTransaction(doc)
try:
	if boolDel:
		doc.Delete(bechangedVPid[1][0])
except:
	pass
# End Transaction
TransactionManager.Instance.TransactionTaskDone()
doc.Regenerate()

result = "ok"
#Assign your output to the OUT variable.
OUT = result</Script>
    </PythonNodeModels.PythonNode>
    <CoreNodeModels.Watch guid="d05da280-2afb-4ef1-821b-4807e9993aa1" type="CoreNodeModels.Watch" nickname="Watch" x="-3858.15510302731" y="2832.68955724382" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" />
    <PythonNodeModels.PythonNode guid="e471f7ca-42f6-4f02-b3ea-7f085e7f344f" type="PythonNodeModels.PythonNode" nickname="Get All View Class" x="-3864.42543453449" y="3190.56351624111" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" inputcount="0">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
clr.AddReference('RevitAPIUI')
from Autodesk.Revit.UI import TaskDialog
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *
clr.ImportExtensions(Revit.GeometryConversion)

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

import sys
import System

#The inputs to this node will be stored as a list in the IN variables.
dataEnteringNode = IN

result = FilteredElementCollector(doc).OfClass(View)


#Assign your output to the OUT variable.
OUT = result</Script>
    </PythonNodeModels.PythonNode>
    <PythonNodeModels.PythonNode guid="60ce349e-f317-4553-bc49-e657379acb2c" type="PythonNodeModels.PythonNode" nickname="Get Type ID" x="-3500.5650233543" y="3186.8519543917" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
clr.AddReference('RevitAPIUI')
from Autodesk.Revit.UI import TaskDialog
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *
clr.ImportExtensions(Revit.GeometryConversion)

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

import sys
import System

#The inputs to this node will be stored as a list in the IN variables.
dataEnteringNode = IN

viewelems = UnwrapElement(IN[0])

result=[]
for elem in viewelems:
	result.append(doc.GetElement(elem.GetTypeId()))


#Assign your output to the OUT variable.
OUT = result</Script>
    </PythonNodeModels.PythonNode>
    <CoreNodeModels.CreateList guid="04fba2eb-4515-4959-ba89-a6b44bfc8b20" type="CoreNodeModels.CreateList" nickname="List.Create" x="-3868.21045760461" y="2970.475721957" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="true" inputcount="1" />
    <PythonNodeModels.PythonNode guid="695659f7-f960-4923-bbe5-d31084ac577d" type="PythonNodeModels.PythonNode" nickname="Get Type ID" x="-3410.33476422023" y="2994.56622421971" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" inputcount="1">
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *
clr.AddReference('RevitAPI')
from Autodesk.Revit.DB import *
clr.AddReference('RevitAPIUI')
from Autodesk.Revit.UI import TaskDialog
clr.AddReference("RevitNodes")
import Revit
clr.ImportExtensions(Revit.Elements)
clr.AddReference("RevitServices")
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager
from System.Collections.Generic import *
clr.ImportExtensions(Revit.GeometryConversion)

doc = DocumentManager.Instance.CurrentDBDocument
uiapp = DocumentManager.Instance.CurrentUIApplication
app = uiapp.Application

import sys
import System

#The inputs to this node will be stored as a list in the IN variables.
dataEnteringNode = IN

viewelems = UnwrapElement(IN[0])

result=[]
elemTypes = []
for elem in viewelems:
	result.append(doc.GetElement(elem.GetTypeId()).CanBeDeleted)

#Assign your output to the OUT variable.
OUT = result</Script>
    </PythonNodeModels.PythonNode>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="36a7fd07-e977-4524-bba2-b62928b70478" start_index="0" end="2658e5b3-44a9-4896-bd87-c30728625c97" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="36a7fd07-e977-4524-bba2-b62928b70478" start_index="0" end="d05da280-2afb-4ef1-821b-4807e9993aa1" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9e6c319f-6cdd-489d-9875-7de136ed006d" start_index="0" end="36a7fd07-e977-4524-bba2-b62928b70478" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="4909c617-107b-4793-a145-0588e6dd6602" start_index="0" end="36a7fd07-e977-4524-bba2-b62928b70478" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="4909c617-107b-4793-a145-0588e6dd6602" start_index="0" end="04fba2eb-4515-4959-ba89-a6b44bfc8b20" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="6d8564ac-afaf-4ab1-a430-c3e5e786b27e" start_index="0" end="2658e5b3-44a9-4896-bd87-c30728625c97" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e471f7ca-42f6-4f02-b3ea-7f085e7f344f" start_index="0" end="60ce349e-f317-4553-bc49-e657379acb2c" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="04fba2eb-4515-4959-ba89-a6b44bfc8b20" start_index="0" end="695659f7-f960-4923-bbe5-d31084ac577d" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="cdc774f5-f866-45d6-95b3-7f5edc70c2de" annotationText="&lt;Click here to edit the group title&gt;" left="-3874.42543453449" top="3156.8519543917" width="507.86041118019" height="126.71156184941" fontSize="14" InitialTop="3186.8519543917" InitialHeight="126.711561849404" TextblockHeight="20" backgrouund="#FFC1D676">
      <Models ModelGuid="e471f7ca-42f6-4f02-b3ea-7f085e7f344f" />
      <Models ModelGuid="60ce349e-f317-4553-bc49-e657379acb2c" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>