{
  "Uuid": "3c9d0464-8643-5ffe-96e5-ab1769818209",
  "IsCustomNode": false,
  "Description": "",
  "Name": "10-GetGridIntersect",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nfrom clr import StrongBox\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.SolidSolidCutUtils import *\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import TaskDialog\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import *\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference('System.Windows.Forms')\r\nimport System.Windows.Forms\r\nfrom System.Windows.Forms import *\r\nimport System\r\nfrom System.Collections.Generic import List\r\nfrom shutil import copyfile\r\nimport tempfile\r\nimport uuid\r\nimport os\r\n##\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nopt = Options()\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n# Place your code below this line\r\n\r\ndef allElemsOfCat(catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\ttry:\r\n\t\tfor e in doc.Settings.Categories:\t\t\t\r\n\t\t\tif e.Name == catName.ToString():\r\n\t\t\t\tcat = e\t\r\n\t\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WhereElementIsNotElementType()\t\r\n\t\tfor e in elems:\r\n\t\t\tres.append(e)\r\n\texcept:\r\n\t\tpass\r\n\treturn res\r\n\r\ndef allElemsIntersectedOfCat(ee,catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\tfor e in doc.Settings.Categories:\r\n\t#res.append(e.Name)\r\n\t\tif e.Name == catName.ToString():\r\n\t\t\tcat = e\t\r\n\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WherePasses(ElementIntersectsElementFilter(ee))#.WhereElementIsNotElementType()\r\n\tfor eee in elems:\r\n\t\tres.append(eee)\r\n\treturn res   \r\n\r\ndef allElemsNOTIntersectedOfCat(ee,catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\tfor e in doc.Settings.Categories:\r\n\t#res.append(e.Name)\r\n\t\tif e.Name == catName.ToString():\r\n\t\t\tcat = e\t\r\n\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WherePasses(ElementIntersectsElementFilter(ee),False)#.WhereElementIsNotElementType()\r\n\tfor eee in elems:\r\n\t\tres.append(eee)\r\n\treturn res\r\n\r\ndef joinTwoElement(a,b):\t\r\n\tboolCut = JGU.AreElementsJoined(doc,a,b)\r\n\tif not boolCut:\r\n\t\tJGU.JoinGeometry(doc,a,b)\r\n\t\tif not JGU.IsCuttingElementInJoin(doc,a,b):\r\n\t\t\tJGU.SwitchJoinOrder(doc,a,b)\r\ndef UNjoinTwoElement(a,b):\r\n\tJGU.UnjoinGeometry(doc,a,b)\r\n\r\ndef joinAllEnableJoinedElemsOfCat(e,cat,doc):\r\n\telems = allElemsIntersectedOfCat(e,cat,doc)\r\n\tfor el in elems:\r\n\t\tjoinTwoElement(e,el)\r\ndef UNjoinAllNOTJoinedElemsOfCat(e,cat,doc):\r\n\telems = allElemsNOTIntersectedOfCat(e,cat,doc)\r\n\tfor el in elems:\r\n\t\tUNjoinTwoElement(e,el)\r\n####\r\ndef getSolids(e):\r\n\tsolid = []\r\n\tgeoE1 = e.get_Geometry(opt)\r\n\tgeoE2 = []\r\n\ttry:\r\n\t\tenum = geoE1.GetEnumerator()\t\r\n\t\twhile enum.MoveNext():\r\n\t\t\tgeoE2 = enum.Current\r\n\t\tif isinstance(geoE2,Solid):\r\n\t\t\tsolid.Add(geoE2)\r\n\t\t\r\n\t\telse:\r\n\t\t\tif isinstance(geoE2,GeometryInstance):\r\n\t\t\t\tgeoObj = geoE2.GetInstanceGeometry()\r\n\t\t\t\tfor s in geoObj:\r\n\t\t\t\t\tif isinstance(s,Solid) and s.Volume > 0:\r\n\t\t\t\t\t\tsolid.Add(s)\t\r\n\texcept Exceptyion, ex:\r\n\t\tmergedSolid.append(ex)\r\n\t\tpass\t\r\n\treturn solid\r\n####\r\ndef UnionSolid (solids):\r\n\tmergedSolid = []\r\n\ttry:\r\n\t\tif len(solids) == 0:\r\n\t\t\treturn null\r\n\t\tif len(solids) == 1:\r\n\t\t\treturn solids[0]\r\n\t\telse:\t\t\t\r\n\t\t\tfirst = solids[0]\r\n\t\t\tres = solids[1:]\r\n\t\t\tsecond = UnionSolid(res)\t\t\t\r\n\t\t\tmergedSolid = BooleanOperationsUtils.ExecuteBooleanOperation(first,second,BooleanOperationsType.Union)\r\n\texcept Exceptyion, ex:\r\n\t\tmergedSolid.append(ex)\r\n\t\tpass\r\n\treturn mergedSolid\r\n\r\ndef getRawVolume(solids):\r\n\tvol = 0\r\n\ttry:\r\n\t\tfor s in solids:\r\n\t\t\tvol += s.Volume*0.0283168\r\n\texcept:\t\r\n\t\tpass\r\n\treturn vol\r\n\r\ndef getSeftVolume(solids): #Intersect SOlids togeget\r\n\tmergedSolid = []\r\n\tvol = []\r\n\ttry:\r\n\t\tmergedSolid = UnionSolid(solids)\r\n\t\tvol = mergedSolid.Volume*0.0283168\r\n\texcept:\t\r\n\t\tpass\r\n\treturn vol\r\ndef exportSolidToSAT(app,msolid,path):\r\n\tres = []\r\n\t#FAMILY CREATION\r\n\tfamPath = app.FamilyTemplatePath + \"\\\\Conceptual Mass\\\\Metric Mass.rft\"\r\n\tfamdoc = app.NewFamilyDocument(famPath)\r\n\t#create Freeform by solid\r\n\twith Transaction(famdoc,\"Create Free Form\") as t:\r\n\t\tt.Start()\r\n\t\ttry:\t\r\n\t\t\tfreeFormElement = FreeFormElement.Create(famdoc,msolid)\r\n\t\texcept Exception, ex:\r\n\t\t\tres.append(ex)\r\n\t\t\tpass\r\n\t\tt.Commit()\r\n\ttempDir = tempfile.gettempdir()\r\n\ttempFamName = tempDir + \"\\\\temFamily\"+\".rfa\"\r\n\t#if os.path.isfile(tempFamName):\r\n\t\t#tempFamName = tempDir + \"\\\\temFamily\"+\"-\"+ msolid.UniqueId.ToString() +\".rfa\"\r\n\t\r\n\tsao = SaveAsOptions()\r\n\tsao.OverwriteExistingFile = True\r\n\tfamdoc.SaveAs(tempFamName,sao)\r\n\t\"\"\"\r\n\tsav = SaveOptions()\r\n\tfamdoc.Save(sav)\r\n\t\"\"\"\r\n\tviewFamTypes = FilteredElementCollector(famdoc).OfClass(ViewFamilyType)\r\n\tviewTypeID = 0\r\n\t\r\n\tfor vft in viewFamTypes:\r\n\t\tif vft.ViewFamily == ViewFamily.ThreeDimensional:\r\n\t\t\tviewTypeID = vft.Id\r\n\t\r\n\t#export SAT\r\n\twith Transaction(famdoc,\"Export SAT\") as tt:\r\n\t\ttt.Start()\r\n\t\tview3D = View3D.CreateIsometric(famdoc,viewTypeID)\r\n\t\ttt.Commit()\r\n\t\r\n\tviewSet = List[ElementId]()\r\n\tviewSet.Add(view3D.Id)\r\n\texportOptions=SATExportOptions()\r\n\tfamdoc.Export (path,\"SolidFile.sat\", viewSet, exportOptions)\r\n\treturn res\r\n\r\n\r\ndef readLinesDYNString(str):\r\n\tres = []\r\n\tfor s in catNames.split(\"\\n\"):\r\n\t\tres.append(s[:-1])\r\n\treturn res\r\n\r\ndef exportSolidToSATMulti(app,listmsolid,path):\r\n\t\r\n\tres = []\r\n\t#FAMILY CREATION\r\n\tfamPath = app.FamilyTemplatePath + \"\\\\Conceptual Mass\\\\Metric Mass.rft\"\r\n\tfamdoc = app.NewFamilyDocument(famPath)\t\r\n\ttempDir = tempfile.gettempdir()\r\n\ttempFamName = tempDir + \"\\\\temFamily\"+\".rfa\"\r\n\t#if os.path.isfile(tempFamName):\r\n\t\t#tempFamName = tempDir + \"\\\\temFamily\"+\"-\"+ msolid.UniqueId.ToString() +\".rfa\"\t\r\n\tsao = SaveAsOptions()\r\n\tsao.OverwriteExistingFile = True\r\n\tfamdoc.SaveAs(tempFamName,sao)\r\n\t\"\"\"\r\n\tsav = SaveOptions()\r\n\tfamdoc.Save(sav)\r\n\t\"\"\"\r\n\tviewFamTypes = FilteredElementCollector(famdoc).OfClass(ViewFamilyType)\r\n\tviewTypeID = 0\t\r\n\tfor vft in viewFamTypes:\r\n\t\tif vft.ViewFamily == ViewFamily.ThreeDimensional:\r\n\t\t\tviewTypeID = vft.Id\r\n\t\r\n\twith Transaction(famdoc,\"CreateView\") as tt:\r\n\t\ttt.Start()\r\n\t\tview3D = View3D.CreateIsometric(famdoc,viewTypeID)\r\n\t\ttt.Commit()\r\n\tviewSet = List[ElementId]()\r\n\tviewSet.Add(view3D.Id)\t\r\n\t\r\n\t#export SAT\r\n\t#create Freeform by solid\r\n\tfor i in range(len(listmsolid)):\r\n\t\tmsolid = listmsolid[i]\r\n\t\twith Transaction(famdoc,\"Create Free Form\") as t:\r\n\t\t\tt.Start()\r\n\t\t\ttry:\t\r\n\t\t\t\tfreeFormElement = FreeFormElement.Create(famdoc,msolid)\r\n\t\t\texcept Exception, ex:\r\n\t\t\t\tres.append(ex)\r\n\t\t\t\tpass\r\n\t\t\tt.Commit()\r\n\t\texportOptions=SATExportOptions()\r\n\t\tsatFN = \"Solid\" + \"-\" + str(i) +\".sat\"\r\n\t\tfamdoc.Export (path,satFN, viewSet, exportOptions)\r\n\t\twith Transaction(famdoc,\"Delete\") as ttt:\r\n\t\t\tttt.Start()\r\n\t\t\tif not os.path.isfile(path+\"\\\\\"+satFN):\r\n\t\t\t\tfamdoc.Delete(freeFormElement.Id)\t\r\n\t\t\tttt.Commit()\t\t\t\r\n\t\t\r\n\t\t#sav = SaveOptions()\r\n\t\t#famdoc.Save(sav)\r\n\t\tres.append(i)\t\r\n\t\r\n\treturn res\r\ndef getElementCurve(ee):\r\n\tcurve = Line.CreateBound(XYZ(),XYZ(1,1,1))\r\n\ttry:\r\n\t\tcv = ee.Curve\r\n\t\tif cv:\r\n\t\t\tcurve = cv\r\n\texcept:\r\n\t\tpass\r\n\treturn curve\r\ndef getElementCurves(elems):\r\n\tcurves = []\r\n\ttry:\t\r\n\t\tfor ee in elems:\r\n\t\t\tcv = ee.Curve\r\n\t\t\tif cv:\r\n\t\t\t\tcurves.append(cv)\r\n\texcept:\r\n\t\tpass\r\n\treturn curves\r\ndef flatLines(lines):\r\n\tcurves = []\r\n\ttry:\t\t\r\n\t\tfor ln in lines:\r\n\t\t\tsp = XYZ(ln.GetEndPoint(0).X,ln.GetEndPoint(0).Y,0)\r\n\t\t\tep = XYZ(ln.GetEndPoint(1).X,ln.GetEndPoint(1).Y,0)\r\n\t\t\tnewLn = Line.CreateBound(sp,ep)\r\n\t\t\tif newLn:\r\n\t\t\t\tcurves.append(newLn)\r\n\texcept Exception, ex:\r\n\t\tcurves.append(ex)\r\n\t\tpass\r\n\treturn curves\r\ndef flatLine(ln):\r\n\tnewLn = Line.CreateBound(XYZ(),XYZ(1,1,1))\r\n\ttry:\r\n\t\tsp = XYZ(ln.GetEndPoint(0).X,ln.GetEndPoint(0).Y,0)\r\n\t\tep = XYZ(ln.GetEndPoint(1).X,ln.GetEndPoint(1).Y,0)\r\n\t\tnewLn = Line.CreateBound(sp,ep)\r\n\texcept:\r\n\t\tpass\r\n\treturn newLn\r\n\r\ndef GetIntersectGridVsGrids(curve,curveElems):#lay danh sach diem giao truc\r\n\tres = []\r\n\tce0 =getElementCurve(curve)\r\n\tcount = len(curveElems)\t\r\n\tfor ce in curveElems:\r\n\t\tira = StrongBox[IntersectionResultArray]()\r\n\t\tirs = IntersectionResult()\r\n\t\ttry:\r\n\t\t\tcee = getElementCurve(ce)\r\n\t\t\tintesect = ce0.Intersect(cee,ira)\r\n\t\t\tirs = ira.get_Item(0)\r\n\t\t\tif intesect == SetComparisonResult.Overlap:\r\n\t\t\t\tipt = irs.XYZPoint\r\n\t\t\t\tres.append(ipt)\r\n\t\texcept:\r\n\t\t\tpass\r\n\treturn res\r\ndef GetIntersectGridVsGrids2(curve,curveElems):#lay danh sach ten 2 truc giao\r\n\tres = []\r\n\tname1 = curve.LookupParameter(\"Name\").AsString()\r\n\tce0 =getElementCurve(curve)\r\n\tcount = len(curveElems)\t\r\n\tfor ce in curveElems:\r\n\t\tname2 = ce.LookupParameter(\"Name\").AsString()\r\n\t\tira = StrongBox[IntersectionResultArray]()\r\n\t\tirs = IntersectionResult()\r\n\t\ttry:\r\n\t\t\tcee = getElementCurve(ce)\r\n\t\t\tintesect = ce0.Intersect(cee,ira)\r\n\t\t\tirs = ira.get_Item(0)\r\n\t\t\tif intesect == SetComparisonResult.Overlap:\r\n\t\t\t\tipt = irs.XYZPoint\r\n\t\t\t\tname = name1+\"/\"+name2\r\n\t\t\t\t\r\n\t\t\t\t#res.append(ipt)\r\n\t\t\t\tres.append(name)\r\n\t\texcept:\r\n\t\t\tpass\r\n\treturn res\r\n\r\ndef Get2CurvesIntersectPoint(ce0,cee):\r\n\tipt = XYZ()\r\n\tira = StrongBox[IntersectionResultArray]()\r\n\tirs = IntersectionResult()\r\n\ttry:\t\r\n\t\tipt = ce0.Intersect(cee,ira)\r\n\t\tirs = ira.get_Item(0)\r\n\texcept Exception, ex:\r\n\t\tipt = ex\r\n\t\tpass\r\n\treturn irs.XYZPoint\r\n\t\r\n\t\r\n\t\r\ndef intersectGridsPoints(doc,catName):\r\n\tgrids = allElemsOfCat(catName,doc)\t\r\n\tres = []\t\r\n\tiniC = len(grids)\r\n\tcount = iniC\r\n\ttry:\r\n\t\twhile count >2:\r\n\t\t\tgr = grids[iniC-count]\r\n\t\t\trest = grids[iniC-count+1:]\r\n\t\t\tintersect = GetIntersectGridVsGrids(gr,rest)\r\n\t\t\tif len(intersect) > 0:\r\n\t\t\t\tfor ints in intersect:\r\n\t\t\t\t\tres.Add(ints)\r\n\t\t\tcount-=1\t\r\n\texcept:\r\n\t\tpass\r\n\treturn res\r\n\t\r\ndef intersectGridsPointNames(doc,catName):#lay danh sach Giao truc và ten\r\n\tgrids = allElemsOfCat(catName,doc)\t\r\n\tres = []\t\r\n\tiniC = len(grids)\r\n\tcount = iniC\r\n\ttry:\r\n\t\twhile count >2:\r\n\t\t\tgr = grids[iniC-count]\r\n\t\t\trest = grids[iniC-count+1:]\t\t\t\r\n\t\t\tintersect = GetIntersectGridVsGrids(gr,rest)\r\n\t\t\tname = GetIntersectGridVsGrids2(gr,rest)\r\n\t\t\tif len(intersect) > 0 and len(intersect) == len(name):\r\n\t\t\t\tfor i in range(len(intersect)):\r\n\t\t\t\t\tints = intersect[i]\r\n\t\t\t\t\tn = name[i]\t\t\t\t\t\r\n\t\t\t\t\tr = []\r\n\t\t\t\t\tr.append(n)\r\n\t\t\t\t\tr.append(ints)\r\n\t\t\t\t\tres.Add(r)\r\n\t\t\tcount-=1\t\r\n\texcept:\r\n\t\tpass\r\n\treturn res\r\n###################################\r\n\r\ncatName = \"Grids\"\r\nres1 = intersectGridsPoints(doc,catName)\r\nres2 = intersectGridsPointNames(doc,catName)\r\nOUT = res1,res2",
      "VariableInputPorts": true,
      "Id": "0ecf809373594db78f72d67f9215b0aa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4f8d64fc29f54e46a41588cd9febc3dc",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "cd99ffb0ceb74ef59ea66afe6e2a5589",
      "Inputs": [
        {
          "Id": "7ff37260670e4521a222c20c1ce3027c",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c2ffa1a98b3b48a7bfab4c6b8732921a",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "grids[0];\n//points;\ngrids[1];\n//names;",
      "Id": "c307d6f556784b169f33a4cd78f8c995",
      "Inputs": [
        {
          "Id": "110f46c79afa40cfb2cf6cd78ae39360",
          "Name": "grids",
          "Description": "grids",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1f5eae6632e6425c91f76b5def8caa52",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "390f657415f943e994f8547dd1643b2d",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e13ccefe445b49b3b7462a04acab8975",
      "Inputs": [
        {
          "Id": "d4e01a3be2854796b920452cb3a79d50",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "07eeb557dec24d6a8efbada6cab390a6",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    }
  ],
  "Connectors": [
    {
      "Start": "4f8d64fc29f54e46a41588cd9febc3dc",
      "End": "110f46c79afa40cfb2cf6cd78ae39360",
      "Id": "ebd354a5af684c2cb1abff2c6ac21ffd"
    },
    {
      "Start": "1f5eae6632e6425c91f76b5def8caa52",
      "End": "7ff37260670e4521a222c20c1ce3027c",
      "Id": "0e33361a45c74c72b80fb4d59f33d342"
    },
    {
      "Start": "390f657415f943e994f8547dd1643b2d",
      "End": "d4e01a3be2854796b920452cb3a79d50",
      "Id": "14bde710741f4f40b6f6ee28bfbace65"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.3.0.5885",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script-GRid Intersect",
        "Id": "0ecf809373594db78f72d67f9215b0aa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -81.9491754870595,
        "Y": -368.26213803838476
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "cd99ffb0ceb74ef59ea66afe6e2a5589",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 373.31758082769215,
        "Y": -450.88075243232691
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c307d6f556784b169f33a4cd78f8c995",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 189.0,
        "Y": -441.91473660406962
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "e13ccefe445b49b3b7462a04acab8975",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 682.11824202718537,
        "Y": -447.65896250042334
      }
    ],
    "Annotations": [],
    "X": 40.985580361797815,
    "Y": 732.9414351167693,
    "Zoom": 1.1522489252943242
  }
}