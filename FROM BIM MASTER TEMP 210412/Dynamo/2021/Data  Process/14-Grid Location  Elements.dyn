{
  "Uuid": "6267e6fe-4476-4d69-b415-7480a51ab8ca",
  "IsCustomNode": false,
  "Description": null,
  "Name": "14-Grid Location  Elements",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "5072097ed9bf485d9c7aaf586d4cb198",
      "Name": "Category Name",
      "Type": "string",
      "Value": "Structural Foundations",
      "Description": "Creates a string."
    },
    {
      "Id": "7247ef2b079e4082b9b703669e2a9f71",
      "Name": "ParameterName",
      "Type": "string",
      "Value": "COF_GEN__Grid",
      "Description": "Creates a string."
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import TaskDialog\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import *\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference('System.Windows.Forms')\r\nimport System.Windows.Forms\r\nfrom System.Windows.Forms import *\r\n\r\nimport Autodesk.Revit.DB.JoinGeometryUtils as JGU\r\n\r\n##\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nopt = Options()\r\n###################\r\ndef UnjoinElementAlready(e,doc,cat):\r\n\tres = []\r\n\ttry:\r\n\t\tjoinedElems = getJoinElement(e,doc,cat)\r\n\t\tfor ee in joinedElems:\r\n\t\t\tJGU.UnjoinGeometry(doc,e,ee)\r\n\t\t\tres.append(ee)\r\n\texcept Exception, ex:\r\n\t\tres.append(ex)\r\n\t\tpass\r\n\treturn res\r\n\r\ndef getJoinElement(e,doc,cat):\r\n\tres = []\r\n\ttry:\r\n\t\tjoined = JGU.GetJoinedElements(doc,e)\r\n\t\tfor j in joined:\r\n\t\t\tee = doc.GetElement(j)\r\n\t\t\tif ee.Category.Name == cat:\r\n\t\t\t\tres.append(ee)\r\n\texcept Exception, ex:\r\n\t\tres.append(ex)\r\n\t\tpass\r\n\treturn res\r\ndef allElemsOfCat(catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\ttry:\r\n\t\tfor e in doc.Settings.Categories:\r\n\t\t#res.append(e.Name)\r\n\t\t\tif e.Name == catName.ToString():\r\n\t\t\t\tcat = e\t\r\n\t\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WhereElementIsNotElementType()\t\r\n\t\tfor e in elems:\r\n\t\t\tres.append(e)\r\n\texcept:\r\n\t\tpass\r\n\treturn res\r\n\r\ndef allElemsIntersectedOfCat(ee,catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\tfor e in doc.Settings.Categories:\r\n\t\tif e.Name == catName.ToString():\r\n\t\t\tcat = e\t\r\n\ttry:\r\n\t\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WherePasses(ElementIntersectsElementFilter(ee))#.WhereElementIsNotElementType()\r\n\texcept Exception, ex:\r\n\t\tres.append(ex)\r\n\t\tpass\r\n\tfor eee in elems:\r\n\t\ttry:\r\n\t\t\tres.append(eee)\r\n\t\texcept Exception, ex:\r\n\t\t\tres.append(ex)\r\n\t\t\tpass\r\n\t#joined = getJoinElement(ee, doc,catName)\r\n\t#res.Add(joined)\r\n\treturn res \r\n  \r\n\r\ndef allElemsNOTIntersectedOfCat(ee,catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\tfor e in doc.Settings.Categories:\r\n\t#res.append(e.Name)\r\n\t\tif e.Name == catName.ToString():\r\n\t\t\tcat = e\t\r\n\t#elems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WherePasses(ElementIntersectsElementFilter(ee),False)#.WhereElementIsNotElementType()\r\n\telems = getJoinElement(ee,doc,catName)\r\n\tfor eee in elems:\r\n\t\tif not JGU.IsCuttingElementInJoin(doc, ee, eee):\r\n\t\t\tres.append(eee)\r\n\treturn res\r\n\r\ndef joinTwoElement(a,b):\r\n\ttry: \r\n\t\tboolCut = JGU.AreElementsJoined(doc,a,b)\r\n\t\t#JGU.UnjoinGeometry(doc,a,b)\r\n\t\t\r\n\t\tif not boolCut:\r\n\t\t\tJGU.JoinGeometry(doc,a,b)\r\n\t\tif not JGU.IsCuttingElementInJoin(doc,a,b):\r\n\t\t\tJGU.SwitchJoinOrder(doc,a,b)\r\n\texcept :\r\n\t\tpass\t\r\ndef UNjoinTwoElement(a,b):\r\n\tJGU.UnjoinGeometry(doc,a,b)\r\n\r\ndef joinAllEnableJoinedElemsOfCat(e,cat,doc):\r\n\telems = allElemsIntersectedOfCat(e,cat,doc)\r\n\tfor el in elems:\r\n\t\ttry:\r\n\t\t\tjoinTwoElement(e,el)\r\n\t\texcept:\r\n\t\t\tpass\r\ndef UNjoinAllNOTJoinedElemsOfCat(e,cat,doc):\r\n\telems = allElemsNOTIntersectedOfCat(e,cat,doc)\r\n\tfor el in elems:\r\n\t\tUNjoinTwoElement(e,el)\r\n\t\r\ndef getBoundingBoxLocationPoint(e):\r\n\tpass\r\ndef getElementLocationPoints(doc,catName):\r\n\telems = allElemsOfCat(catName,doc)\r\n\telemLocPts = []\r\n\tfor ee in elems:\t\t\r\n\t\t#def flatLocationPoint(doc,e)\r\n\t\ttry:\r\n\t\t\tlc = ee.Location\t\r\n\t\t\tif lc.__class__.__name__ == \"LocationPoint\":\t\r\n\t\t\t\telemLocPts.append(lc.Point)\r\n\t\t\tif lc.__class__.__name__ == \"LocationCurve\":\r\n\t\t\t\t#Line.CreateBound(lc.Curve.GetEndPoint(0),lc.Curve.GetEndPoint(1))\r\n\t\t\t\tpts = []\r\n\t\t\t\tpts.append(lc.Curve.GetEndPoint(0))\r\n\t\t\t\tpts.append(lc.Curve.GetEndPoint(1))\t\t\r\n\t\t\t\telemLocPts.append(pts)\r\n\t\t\telse:\r\n\t\t\t\telemLocPts = getBoundingBoxLocationPoint(e)\t\t\t\r\n\t\texcept :\r\n\t\t\tpass\r\n\treturn elemLocPts\r\ndef getElementLocationPoints2(doc,catName):\r\n\telems = allElemsOfCat(catName,doc)\r\n\telemLocPts = []\r\n\tfor ee in elems:\t\r\n\t\tr = []\t\r\n\t\t#def flatLocationPoint(doc,e)\r\n\t\ttry:\r\n\t\t\tlc = ee.Location\t\r\n\t\t\tif lc.__class__.__name__ == \"LocationPoint\":\t\r\n\t\t\t\tpts = lc.Point\r\n\t\t\t\tr.append(ee)\r\n\t\t\t\tr.append(pts)\r\n\t\t\t\telemLocPts.append(r)\r\n\t\t\tif lc.__class__.__name__ == \"LocationCurve\":\r\n\t\t\t\t#Line.CreateBound(lc.Curve.GetEndPoint(0),lc.Curve.GetEndPoint(1))\r\n\t\t\t\tpts = []\r\n\t\t\t\tpts.append(lc.Curve.GetEndPoint(0))\r\n\t\t\t\tpts.append(lc.Curve.GetEndPoint(1))\t\t\r\n\t\t\t\tr.append(ee)\r\n\t\t\t\tr.append(pts)\r\n\t\t\t\telemLocPts.append(r)\r\n\t\t\telse:\r\n\t\t\t\telemLocPts = getBoundingBoxLocationPoint(e)\t\t\t\r\n\t\texcept :\r\n\t\t\tpass\r\n\treturn elemLocPts\r\n\r\n##############\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\ncatName = IN[0]\r\nelems = allElemsOfCat(catName,doc)\r\nelemLocPts = getElementLocationPoints2(doc,catName)\r\n\r\n\r\n#MessageBox.Show('Hello')\r\n# Assign your output to the OUT variable.\r\nOUT = elemLocPts,0",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "7b819b5f8fa947d4a388aaf6791962c0",
      "Inputs": [
        {
          "Id": "810a24550ddb4234be1d54352565ffa2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "99854690649d409f929c1d4d76ef2fcf",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "5bfbb08b416e4ed49a8d29600997ca90",
      "Inputs": [
        {
          "Id": "4db43689d33a47eaa13ce78c83786a55",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b5e83e2dd6034da0a43fabb577f6587e",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Structural Foundations",
      "Id": "5072097ed9bf485d9c7aaf586d4cb198",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5b1228588bf84568a75c2a3201aba246",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "res[0];\n//location points;\nres[1];\n//Grid Intersect Name;",
      "Id": "91d656d618564eb99940ee9b4ec16ead",
      "Inputs": [
        {
          "Id": "1ada8a860b9d4f54a5cb1e1097922a0f",
          "Name": "res",
          "Description": "res",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "23f34de8ab724dbdb9b13c2e2d5e188a",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a7a041d179bc42b593e16353c08743f2",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nfrom clr import StrongBox\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.SolidSolidCutUtils import *\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import TaskDialog\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import *\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference('System.Windows.Forms')\r\nimport System.Windows.Forms\r\nfrom System.Windows.Forms import *\r\nimport System\r\nfrom System.Collections.Generic import List\r\nfrom shutil import copyfile\r\nimport tempfile\r\nimport uuid\r\nimport os\r\n##\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nopt = Options()\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n# Place your code below this line\r\n\r\ndef allElemsOfCat(catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\ttry:\r\n\t\tfor e in doc.Settings.Categories:\t\t\t\r\n\t\t\tif e.Name == catName.ToString():\r\n\t\t\t\tcat = e\t\r\n\t\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WhereElementIsNotElementType()\t\r\n\t\tfor e in elems:\r\n\t\t\tres.append(e)\r\n\texcept:\r\n\t\tpass\r\n\treturn res\r\n\r\ndef getElementCurve(ee):\r\n\tcurve = Line.CreateBound(XYZ(),XYZ(1,1,1))\r\n\ttry:\r\n\t\tcv = ee.Curve\r\n\t\tif cv:\r\n\t\t\tcurve = cv\r\n\texcept:\r\n\t\tpass\r\n\treturn curve\r\ndef getElementCurves(elems):\r\n\tcurves = []\r\n\ttry:\t\r\n\t\tfor ee in elems:\r\n\t\t\tcv = ee.Curve\r\n\t\t\tif cv:\r\n\t\t\t\tcurves.append(cv)\r\n\texcept:\r\n\t\tpass\r\n\treturn curves\r\ndef flatLines(lines):\r\n\tcurves = []\r\n\ttry:\t\t\r\n\t\tfor ln in lines:\r\n\t\t\tsp = XYZ(ln.GetEndPoint(0).X,ln.GetEndPoint(0).Y,0)\r\n\t\t\tep = XYZ(ln.GetEndPoint(1).X,ln.GetEndPoint(1).Y,0)\r\n\t\t\tnewLn = Line.CreateBound(sp,ep)\r\n\t\t\tif newLn:\r\n\t\t\t\tcurves.append(newLn)\r\n\texcept Exception, ex:\r\n\t\tcurves.append(ex)\r\n\t\tpass\r\n\treturn curves\r\ndef flatLine(ln):\r\n\tnewLn = Line.CreateBound(XYZ(),XYZ(1,1,1))\r\n\ttry:\r\n\t\tsp = XYZ(ln.GetEndPoint(0).X,ln.GetEndPoint(0).Y,0)\r\n\t\tep = XYZ(ln.GetEndPoint(1).X,ln.GetEndPoint(1).Y,0)\r\n\t\tnewLn = Line.CreateBound(sp,ep)\r\n\texcept:\r\n\t\tpass\r\n\treturn newLn\r\n\r\ndef GetIntersectGridVsGrids(curve,curveElems):#lay danh sach diem giao truc\r\n\tres = []\r\n\tce0 =getElementCurve(curve)\r\n\tcount = len(curveElems)\t\r\n\tfor ce in curveElems:\r\n\t\tira = StrongBox[IntersectionResultArray]()\r\n\t\tirs = IntersectionResult()\r\n\t\ttry:\r\n\t\t\tcee = getElementCurve(ce)\r\n\t\t\tintesect = ce0.Intersect(cee,ira)\r\n\t\t\tirs = ira.get_Item(0)\r\n\t\t\tif intesect == SetComparisonResult.Overlap:\r\n\t\t\t\tipt = irs.XYZPoint\r\n\t\t\t\tres.append(ipt)\r\n\t\texcept:\r\n\t\t\tpass\r\n\treturn res\r\ndef GetIntersectGridVsGrids2(curve,curveElems):#lay danh sach ten 2 truc giao\r\n\tres = []\r\n\tname1 = curve.LookupParameter(\"Name\").AsString()\r\n\tce0 =getElementCurve(curve)\r\n\tcount = len(curveElems)\t\r\n\tfor ce in curveElems:\r\n\t\tname2 = ce.LookupParameter(\"Name\").AsString()\r\n\t\tira = StrongBox[IntersectionResultArray]()\r\n\t\tirs = IntersectionResult()\r\n\t\ttry:\r\n\t\t\tcee = getElementCurve(ce)\r\n\t\t\tintesect = ce0.Intersect(cee,ira)\r\n\t\t\tirs = ira.get_Item(0)\r\n\t\t\tif intesect == SetComparisonResult.Overlap:\r\n\t\t\t\tipt = irs.XYZPoint\r\n\t\t\t\tname = name1+\"/\"+name2\r\n\t\t\t\t\r\n\t\t\t\t#res.append(ipt)\r\n\t\t\t\tres.append(name)\r\n\t\texcept:\r\n\t\t\tpass\r\n\treturn res\r\n\r\ndef Get2CurvesIntersectPoint(ce0,cee):\r\n\tipt = XYZ()\r\n\tira = StrongBox[IntersectionResultArray]()\r\n\tirs = IntersectionResult()\r\n\ttry:\t\r\n\t\tipt = ce0.Intersect(cee,ira)\r\n\t\tirs = ira.get_Item(0)\r\n\texcept Exception, ex:\r\n\t\tipt = ex\r\n\t\tpass\r\n\treturn irs.XYZPoint\r\n\t\r\n\t\r\n\t\r\ndef intersectGridsPoints(doc,catName):\r\n\tgrids = allElemsOfCat(catName,doc)\t\r\n\tres = []\t\r\n\tiniC = len(grids)\r\n\tcount = iniC\r\n\ttry:\r\n\t\twhile count >2:\r\n\t\t\tgr = grids[iniC-count]\r\n\t\t\trest = grids[iniC-count+1:]\r\n\t\t\tintersect = GetIntersectGridVsGrids(gr,rest)\r\n\t\t\tif len(intersect) > 0:\r\n\t\t\t\tfor ints in intersect:\r\n\t\t\t\t\tres.Add(ints)\r\n\t\t\tcount-=1\t\r\n\texcept:\r\n\t\tpass\r\n\treturn res\r\n\t\r\ndef intersectGridsPointNames(doc,catName):#lay danh sach Giao truc và ten\r\n\tgrids = allElemsOfCat(catName,doc)\t\r\n\tres = []\t\r\n\tiniC = len(grids)\r\n\tcount = iniC\r\n\ttry:\r\n\t\twhile count >2:\r\n\t\t\tgr = grids[iniC-count]\r\n\t\t\trest = grids[iniC-count+1:]\t\t\t\r\n\t\t\tintersect = GetIntersectGridVsGrids(gr,rest)\r\n\t\t\tname = GetIntersectGridVsGrids2(gr,rest)\r\n\t\t\tif len(intersect) > 0 and len(intersect) == len(name):\r\n\t\t\t\tfor i in range(len(intersect)):\r\n\t\t\t\t\tints = intersect[i]\r\n\t\t\t\t\tn = name[i]\t\t\t\t\t\r\n\t\t\t\t\tr = []\r\n\t\t\t\t\tr.append(n)\r\n\t\t\t\t\tr.append(ints)\r\n\t\t\t\t\tres.Add(r)\r\n\t\t\tcount-=1\t\r\n\texcept:\r\n\t\tpass\r\n\treturn res\r\n###################################\r\n\r\ncatName = \"Grids\"\r\nres1 = intersectGridsPoints(doc,catName)\r\nres2 = intersectGridsPointNames(doc,catName)\r\nOUT = res1,res2",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "3522d8cb3b76487f97023e494fac8fa6",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f4f4f35e6181456ca51e1668ebd20b4b",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "grids[0];\n//points;\ngrids[1];\n//names;",
      "Id": "b770e18842044cbe890477db7da52ddf",
      "Inputs": [
        {
          "Id": "962355da99e848d585758cff08b1f74d",
          "Name": "grids",
          "Description": "grids",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d81a820997ce4046a3d9de8676041139",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "452054304b6a4f3f8659a9c452b189c0",
          "Name": "",
          "Description": "Value of expression at line 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "13aab55051c44bfb9afe7ca0679de7f5",
      "Inputs": [
        {
          "Id": "5b97dadc12c9414182abd66e745f6961",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "40aea24fcc9a400d8189dd9efb024ba2",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1c013ae1b1df4c618ed79b660db59e9a",
      "Inputs": [
        {
          "Id": "e76b818f392642a0a7623e75c1144478",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ea268bc511aa44768c90b61f0a356d4e",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "def allElemsIntersectedOfCat(ee,catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\tfor e in doc.Settings.Categories:\r\n\t#res.append(e.Name)\r\n\t\tif e.Name == catName.ToString():\r\n\t\t\tcat = e\t\r\n\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WherePasses(ElementIntersectsElementFilter(ee))#.WhereElementIsNotElementType()\r\n\tfor eee in elems:\r\n\t\tres.append(eee)\r\n\treturn res   \r\ndef allElemsNOTIntersectedOfCat(ee,catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\tfor e in doc.Settings.Categories:\r\n\t#res.append(e.Name)\r\n\t\tif e.Name == catName.ToString():\r\n\t\t\tcat = e\t\r\n\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WherePasses(ElementIntersectsElementFilter(ee),False)#.WhereElementIsNotElementType()\r\n\tfor eee in elems:\r\n\t\tres.append(eee)\r\n\treturn res\r\ndef joinTwoElement(a,b):\t\r\n\tboolCut = JGU.AreElementsJoined(doc,a,b)\r\n\tif not boolCut:\r\n\t\tJGU.JoinGeometry(doc,a,b)\r\n\t\tif not JGU.IsCuttingElementInJoin(doc,a,b):\r\n\t\t\tJGU.SwitchJoinOrder(doc,a,b)\r\ndef UNjoinTwoElement(a,b):\r\n\tJGU.UnjoinGeometry(doc,a,b)\r\n\r\ndef joinAllEnableJoinedElemsOfCat(e,cat,doc):\r\n\telems = allElemsIntersectedOfCat(e,cat,doc)\r\n\tfor el in elems:\r\n\t\tjoinTwoElement(e,el)\r\ndef UNjoinAllNOTJoinedElemsOfCat(e,cat,doc):\r\n\telems = allElemsNOTIntersectedOfCat(e,cat,doc)\r\n\tfor el in elems:\r\n\t\tUNjoinTwoElement(e,el)\r\n####\r\ndef getSolids(e):\r\n\tsolid = []\r\n\tgeoE1 = e.get_Geometry(opt)\r\n\tgeoE2 = []\r\n\ttry:\r\n\t\tenum = geoE1.GetEnumerator()\t\r\n\t\twhile enum.MoveNext():\r\n\t\t\tgeoE2 = enum.Current\r\n\t\tif isinstance(geoE2,Solid):\r\n\t\t\tsolid.Add(geoE2)\r\n\t\t\r\n\t\telse:\r\n\t\t\tif isinstance(geoE2,GeometryInstance):\r\n\t\t\t\tgeoObj = geoE2.GetInstanceGeometry()\r\n\t\t\t\tfor s in geoObj:\r\n\t\t\t\t\tif isinstance(s,Solid) and s.Volume > 0:\r\n\t\t\t\t\t\tsolid.Add(s)\t\r\n\texcept Exceptyion, ex:\r\n\t\tmergedSolid.append(ex)\r\n\t\tpass\t\r\n\treturn solid\r\n####\r\ndef UnionSolid (solids):\r\n\tmergedSolid = []\r\n\ttry:\r\n\t\tif len(solids) == 0:\r\n\t\t\treturn null\r\n\t\tif len(solids) == 1:\r\n\t\t\treturn solids[0]\r\n\t\telse:\t\t\t\r\n\t\t\tfirst = solids[0]\r\n\t\t\tres = solids[1:]\r\n\t\t\tsecond = UnionSolid(res)\t\t\t\r\n\t\t\tmergedSolid = BooleanOperationsUtils.ExecuteBooleanOperation(first,second,BooleanOperationsType.Union)\r\n\texcept Exceptyion, ex:\r\n\t\tmergedSolid.append(ex)\r\n\t\tpass\r\n\treturn mergedSolid\r\ndef getRawVolume(solids):\r\n\tvol = 0\r\n\ttry:\r\n\t\tfor s in solids:\r\n\t\t\tvol += s.Volume*0.0283168\r\n\texcept:\t\r\n\t\tpass\r\n\treturn vol\r\ndef getSeftVolume(solids): #Intersect SOlids togeget\r\n\tmergedSolid = []\r\n\tvol = []\r\n\ttry:\r\n\t\tmergedSolid = UnionSolid(solids)\r\n\t\tvol = mergedSolid.Volume*0.0283168\r\n\texcept:\t\r\n\t\tpass\r\n\treturn vol\r\ndef exportSolidToSAT(app,msolid,path):\r\n\tres = []\r\n\t#FAMILY CREATION\r\n\tfamPath = app.FamilyTemplatePath + \"\\\\Conceptual Mass\\\\Metric Mass.rft\"\r\n\tfamdoc = app.NewFamilyDocument(famPath)\r\n\t#create Freeform by solid\r\n\twith Transaction(famdoc,\"Create Free Form\") as t:\r\n\t\tt.Start()\r\n\t\ttry:\t\r\n\t\t\tfreeFormElement = FreeFormElement.Create(famdoc,msolid)\r\n\t\texcept Exception, ex:\r\n\t\t\tres.append(ex)\r\n\t\t\tpass\r\n\t\tt.Commit()\r\n\ttempDir = tempfile.gettempdir()\r\n\ttempFamName = tempDir + \"\\\\temFamily\"+\".rfa\"\r\n\t#if os.path.isfile(tempFamName):\r\n\t\t#tempFamName = tempDir + \"\\\\temFamily\"+\"-\"+ msolid.UniqueId.ToString() +\".rfa\"\r\n\t\r\n\tsao = SaveAsOptions()\r\n\tsao.OverwriteExistingFile = True\r\n\tfamdoc.SaveAs(tempFamName,sao)\r\n\t\"\"\"\r\n\tsav = SaveOptions()\r\n\tfamdoc.Save(sav)\r\n\t\"\"\"\r\n\tviewFamTypes = FilteredElementCollector(famdoc).OfClass(ViewFamilyType)\r\n\tviewTypeID = 0\r\n\t\r\n\tfor vft in viewFamTypes:\r\n\t\tif vft.ViewFamily == ViewFamily.ThreeDimensional:\r\n\t\t\tviewTypeID = vft.Id\r\n\t\r\n\t#export SAT\r\n\twith Transaction(famdoc,\"Export SAT\") as tt:\r\n\t\ttt.Start()\r\n\t\tview3D = View3D.CreateIsometric(famdoc,viewTypeID)\r\n\t\ttt.Commit()\r\n\t\r\n\tviewSet = List[ElementId]()\r\n\tviewSet.Add(view3D.Id)\r\n\texportOptions=SATExportOptions()\r\n\tfamdoc.Export (path,\"SolidFile.sat\", viewSet, exportOptions)\r\n\treturn res\r\n\r\ndef readLinesDYNString(str):\r\n\tres = []\r\n\tfor s in catNames.split(\"\\n\"):\r\n\t\tres.append(s[:-1])\r\n\treturn res\r\n\r\ndef exportSolidToSATMulti(app,listmsolid,path):\r\n\t\r\n\tres = []\r\n\t#FAMILY CREATION\r\n\tfamPath = app.FamilyTemplatePath + \"\\\\Conceptual Mass\\\\Metric Mass.rft\"\r\n\tfamdoc = app.NewFamilyDocument(famPath)\t\r\n\ttempDir = tempfile.gettempdir()\r\n\ttempFamName = tempDir + \"\\\\temFamily\"+\".rfa\"\r\n\t#if os.path.isfile(tempFamName):\r\n\t\t#tempFamName = tempDir + \"\\\\temFamily\"+\"-\"+ msolid.UniqueId.ToString() +\".rfa\"\t\r\n\tsao = SaveAsOptions()\r\n\tsao.OverwriteExistingFile = True\r\n\tfamdoc.SaveAs(tempFamName,sao)\r\n\t\"\"\"\r\n\tsav = SaveOptions()\r\n\tfamdoc.Save(sav)\r\n\t\"\"\"\r\n\tviewFamTypes = FilteredElementCollector(famdoc).OfClass(ViewFamilyType)\r\n\tviewTypeID = 0\t\r\n\tfor vft in viewFamTypes:\r\n\t\tif vft.ViewFamily == ViewFamily.ThreeDimensional:\r\n\t\t\tviewTypeID = vft.Id\r\n\t\r\n\twith Transaction(famdoc,\"CreateView\") as tt:\r\n\t\ttt.Start()\r\n\t\tview3D = View3D.CreateIsometric(famdoc,viewTypeID)\r\n\t\ttt.Commit()\r\n\tviewSet = List[ElementId]()\r\n\tviewSet.Add(view3D.Id)\t\r\n\t\r\n\t#export SAT\r\n\t#create Freeform by solid\r\n\tfor i in range(len(listmsolid)):\r\n\t\tmsolid = listmsolid[i]\r\n\t\twith Transaction(famdoc,\"Create Free Form\") as t:\r\n\t\t\tt.Start()\r\n\t\t\ttry:\t\r\n\t\t\t\tfreeFormElement = FreeFormElement.Create(famdoc,msolid)\r\n\t\t\texcept Exception, ex:\r\n\t\t\t\tres.append(ex)\r\n\t\t\t\tpass\r\n\t\t\tt.Commit()\r\n\t\texportOptions=SATExportOptions()\r\n\t\tsatFN = \"Solid\" + \"-\" + str(i) +\".sat\"\r\n\t\tfamdoc.Export (path,satFN, viewSet, exportOptions)\r\n\t\twith Transaction(famdoc,\"Delete\") as ttt:\r\n\t\t\tttt.Start()\r\n\t\t\tif not os.path.isfile(path+\"\\\\\"+satFN):\r\n\t\t\t\tfamdoc.Delete(freeFormElement.Id)\t\r\n\t\t\tttt.Commit()\t\t\t\r\n\t\t\r\n\t\t#sav = SaveOptions()\r\n\t\t#famdoc.Save(sav)\r\n\t\tres.append(i)\t\r\n\t\r\n\treturn res\r\n\t",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "756dde07301d453c864921a422eae616",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d663227d26f14e8a969cc66e2941580a",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import TaskDialog\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import *\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nopt = Options()\r\ncategories = doc.Settings.Categories\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nintersectGridPoints = UnwrapElement(IN[1])\r\nelemPoints = UnwrapElement(IN[0])\r\nparamName = IN[2]\r\n# Place your code below this line\r\ndef writeParam(e,paramName,value):\r\n\ttry:\t\t\t\r\n\t\tparam = e.LookupParameter(paramName)\r\n\t\tparam.Set(value)\t\t\t\t\t\t\t\r\n\texcept:\r\n\t\tpass\r\n\r\ndef mapElementGridLocation(elemPoints,intersectGridPoints):\r\n\tres = []\r\n\tcount = 0\r\n\twith Transaction(doc,\"Input Grid\") as t:\r\n\t\tt.Start()\r\n\t\ttry:\r\n\t\t\tfor p in elemPoints:\t\t\t\r\n\t\t\t\tdx = 0\r\n\t\t\t\tdy = 0\t\t\r\n\t\t\t\tx = p[1].X#float(p.split(\" \")[0])\r\n\t\t\t\ty = p[1].Y#float(p.split(\" \")[1])\r\n\t\t\t\tr = []\r\n\t\t\t\tfor a in intersectGridPoints:\r\n\t\t\t\t\tx1 = a[1].X#float(a.split(\" \")[2])\r\n\t\t\t\t\ty1 = a[1].Y#float(a.split(\" \")[3])\r\n\t\t\t\t\td = ((x1-x)**2+(y1-y)**2)**0.5\r\n\t\t\t\t\tr.append(d)\r\n\t\t\t\t\r\n\t\t\t\tidx = [i for i, zz in enumerate(r) if zz == min(r)]\r\n\t\t\t\taaa= intersectGridPoints[idx[0]]\r\n\t\t\t\t#res.append(aaa)\r\n\t\t\t\t#gridA = aaa[0].split(\"/\")[0] #aaa.split(\" \")[0]\r\n\t\t\t\t#gridB = aaa[0].split(\"/\")[1] #aaa.split(\" \")[1]\t\t\t\r\n\t\t\t\twriteParam(p[0],paramName,aaa[0])\r\n\t\t\t\t#dx = round(x-float(aaa.split(\" \")[2]),3).ToString()\r\n\t\t\t\t#dy = round(y-float(aaa.split(\" \")[3]),3).ToString()\r\n\t\t\t\t#str = gridA + \" \" + gridB + \" \" + dx + \" \" + dy\t\t\r\n\t\t\t\t#res.append(str)\r\n\t\t\t\tcount += 1\r\n\t\texcept Exception, ex:\r\n\t\t\tres.append(ex)\r\n\t\tpass\r\n\t\tt.Commit()\r\n\treturn count,res\r\n#Assign your output to the OUT variable.\r\n\r\n\r\nres = mapElementGridLocation(elemPoints,intersectGridPoints)\r\n\r\nOUT =  res",
      "Engine": "IronPython2",
      "VariableInputPorts": true,
      "Id": "a22e6c1d302b46f5a5c4e149682bc10e",
      "Inputs": [
        {
          "Id": "d8043e88a0b3401e928c5a62fc84d42f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5bea1f1c2c9b410da8e0a8c263a3a669",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7efba1cbf16d4c899899372533f9406b",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "324fbbaba3d347b7999df04b9fde2215",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "COF_GEN__Grid",
      "Id": "7247ef2b079e4082b9b703669e2a9f71",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2fc1a9690a944f7fbe6e4c27f5a08735",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    }
  ],
  "Connectors": [
    {
      "Start": "99854690649d409f929c1d4d76ef2fcf",
      "End": "1ada8a860b9d4f54a5cb1e1097922a0f",
      "Id": "818919e68c2d49ee86c07d9ad10e102d"
    },
    {
      "Start": "5b1228588bf84568a75c2a3201aba246",
      "End": "810a24550ddb4234be1d54352565ffa2",
      "Id": "5942f2ecf6a842feb50549e7384f0f3c"
    },
    {
      "Start": "23f34de8ab724dbdb9b13c2e2d5e188a",
      "End": "4db43689d33a47eaa13ce78c83786a55",
      "Id": "9d45b24061444d4482131adaa18d6508"
    },
    {
      "Start": "23f34de8ab724dbdb9b13c2e2d5e188a",
      "End": "d8043e88a0b3401e928c5a62fc84d42f",
      "Id": "60291fcba14b4e258b8386b3358d62e8"
    },
    {
      "Start": "a7a041d179bc42b593e16353c08743f2",
      "End": "e76b818f392642a0a7623e75c1144478",
      "Id": "e52ae243ca2549e394b38d8f1150aade"
    },
    {
      "Start": "f4f4f35e6181456ca51e1668ebd20b4b",
      "End": "962355da99e848d585758cff08b1f74d",
      "Id": "eecd1c56c9564da6a7c563e64170ea4d"
    },
    {
      "Start": "452054304b6a4f3f8659a9c452b189c0",
      "End": "5b97dadc12c9414182abd66e745f6961",
      "Id": "0b479cd9c9f842689cdc7e801ad0a10e"
    },
    {
      "Start": "452054304b6a4f3f8659a9c452b189c0",
      "End": "5bea1f1c2c9b410da8e0a8c263a3a669",
      "Id": "9ace88281039471495b0eb96be53a094"
    },
    {
      "Start": "2fc1a9690a944f7fbe6e4c27f5a08735",
      "End": "7efba1cbf16d4c899899372533f9406b",
      "Id": "d4d850ae81e24d478da5ab5d7d55b032"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.10.0.3455",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script-Element Location Point",
        "Id": "7b819b5f8fa947d4a388aaf6791962c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 89.183589706754873,
        "Y": 473.74426187037784
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "5bfbb08b416e4ed49a8d29600997ca90",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 917.62988206654393,
        "Y": 179.94397591058129
      },
      {
        "ShowGeometry": true,
        "Name": "Category Name",
        "Id": "5072097ed9bf485d9c7aaf586d4cb198",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -432.39209649828535,
        "Y": 447.83910821566519
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "91d656d618564eb99940ee9b4ec16ead",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 472.20216051111879,
        "Y": 410.75976035208748
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script-GRid Intersect",
        "Id": "3522d8cb3b76487f97023e494fac8fa6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 150.77078500629858,
        "Y": 739.11132517566011
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b770e18842044cbe890477db7da52ddf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 546.922125984958,
        "Y": 700.87722534132308
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "13aab55051c44bfb9afe7ca0679de7f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1127.3170789086093,
        "Y": 784.42523318677036
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "1c013ae1b1df4c618ed79b660db59e9a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1287.7035944240079,
        "Y": 258.45219674212149
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script-unsed Functions",
        "Id": "756dde07301d453c864921a422eae616",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 531.44600628513626,
        "Y": 847.71602638230956
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script-Mapping",
        "Id": "a22e6c1d302b46f5a5c4e149682bc10e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1535.5309367879402,
        "Y": 586.32696220108687
      },
      {
        "ShowGeometry": true,
        "Name": "ParameterName",
        "Id": "7247ef2b079e4082b9b703669e2a9f71",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -392.36859939016955,
        "Y": 521.21698374229186
      }
    ],
    "Annotations": [
      {
        "Id": "694e22ee917644e680014888cf8fab8d",
        "Title": "",
        "Nodes": [
          "5072097ed9bf485d9c7aaf586d4cb198",
          "7247ef2b079e4082b9b703669e2a9f71"
        ],
        "Left": -442.39209649828535,
        "Top": 394.83910821566519,
        "Width": 221.02349710811581,
        "Height": 194.37787552662667,
        "FontSize": 36.0,
        "InitialTop": 447.83910821566519,
        "InitialHeight": 218.37787552662667,
        "TextblockHeight": 43.0,
        "Background": "#FFB9F9E1"
      },
      {
        "Id": "eb7d7165200740c8b96f43c796e590e7",
        "Title": "<Click here to edit the group title>",
        "Nodes": [
          "7b819b5f8fa947d4a388aaf6791962c0",
          "91d656d618564eb99940ee9b4ec16ead"
        ],
        "Left": 79.183589706754873,
        "Top": 357.75976035208748,
        "Width": 666.01857080436389,
        "Height": 219.98450151829036,
        "FontSize": 36.0,
        "InitialTop": 410.75976035208748,
        "InitialHeight": 207.98450151829036,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "7681bc95be264da8824b22a04d48387e",
        "Title": "<Click here to edit the group title>",
        "Nodes": [
          "3522d8cb3b76487f97023e494fac8fa6",
          "b770e18842044cbe890477db7da52ddf"
        ],
        "Left": 140.77078500629858,
        "Top": 647.87722534132308,
        "Width": 583.15134097865939,
        "Height": 195.23409983433703,
        "FontSize": 36.0,
        "InitialTop": 700.87722534132308,
        "InitialHeight": 183.23409983433703,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -723.94209983987207,
    "Y": -155.81213890409447,
    "Zoom": 0.75016533798556218
  }
}