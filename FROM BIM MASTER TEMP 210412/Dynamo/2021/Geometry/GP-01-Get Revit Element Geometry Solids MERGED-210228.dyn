{
  "Uuid": "3c9d0464-8643-5ffe-96e5-ab1769818209",
  "IsCustomNode": false,
  "Description": "",
  "Name": "GP-01-Get Revit Element Geometry Solids MERGED",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "587a8a3122bf40bbbf97e28799e1981d",
      "Name": "Path",
      "Type": "string",
      "Value": "C:\\Users\\USER\\Documents\\GitHub\\cofico\\BIM_master\\Dynamo\\2021",
      "Description": "Creates a string."
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.Revit.DB.SolidSolidCutUtils import *\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import TaskDialog\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import *\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference('System.Windows.Forms')\r\nimport System.Windows.Forms\r\nfrom System.Windows.Forms import *\r\nimport System\r\nfrom System.Collections.Generic import List\r\nfrom shutil import copyfile\r\nimport tempfile\r\nimport uuid\r\nimport os\r\n##\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nopt = Options()\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\n# Place your code below this line\r\n\r\ndef allElemsOfCat (catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\ttry:\r\n\t\tfor e in doc.Settings.Categories:\t\t\t\r\n\t\t\tif e.Name == catName.ToString():\r\n\t\t\t\tcat = e\t\r\n\t\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WhereElementIsNotElementType()\t\r\n\t\tfor e in elems:\r\n\t\t\tres.append(e)\r\n\texcept:\r\n\t\tpass\r\n\treturn res\r\n\r\ndef allElemsIntersectedOfCat(ee,catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\tfor e in doc.Settings.Categories:\r\n\t#res.append(e.Name)\r\n\t\tif e.Name == catName.ToString():\r\n\t\t\tcat = e\t\r\n\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WherePasses(ElementIntersectsElementFilter(ee))#.WhereElementIsNotElementType()\r\n\tfor eee in elems:\r\n\t\tres.append(eee)\r\n\treturn res   \r\n\r\ndef allElemsNOTIntersectedOfCat(ee,catName,doc):\r\n\tres = []\r\n\tcat = []\r\n\tfor e in doc.Settings.Categories:\r\n\t#res.append(e.Name)\r\n\t\tif e.Name == catName.ToString():\r\n\t\t\tcat = e\t\r\n\telems = FilteredElementCollector(doc).OfCategoryId(cat.Id).WherePasses(ElementIntersectsElementFilter(ee),False)#.WhereElementIsNotElementType()\r\n\tfor eee in elems:\r\n\t\tres.append(eee)\r\n\treturn res\r\n\r\ndef joinTwoElement(a,b):\t\r\n\tboolCut = JGU.AreElementsJoined(doc,a,b)\r\n\tif not boolCut:\r\n\t\tJGU.JoinGeometry(doc,a,b)\r\n\t\tif not JGU.IsCuttingElementInJoin(doc,a,b):\r\n\t\t\tJGU.SwitchJoinOrder(doc,a,b)\r\ndef UNjoinTwoElement(a,b):\r\n\tJGU.UnjoinGeometry(doc,a,b)\r\n\r\ndef joinAllEnableJoinedElemsOfCat(e,cat,doc):\r\n\telems = allElemsIntersectedOfCat(e,cat,doc)\r\n\tfor el in elems:\r\n\t\tjoinTwoElement(e,el)\r\ndef UNjoinAllNOTJoinedElemsOfCat(e,cat,doc):\r\n\telems = allElemsNOTIntersectedOfCat(e,cat,doc)\r\n\tfor el in elems:\r\n\t\tUNjoinTwoElement(e,el)\r\n####\r\ndef getSolids(e):\r\n\tsolid = []\r\n\tgeoE1 = e.get_Geometry(opt)\r\n\tgeoE2 = []\r\n\ttry:\r\n\t\tenum = geoE1.GetEnumerator()\t\r\n\t\twhile enum.MoveNext():\r\n\t\t\tgeoE2 = enum.Current\r\n\t\tif isinstance(geoE2,Solid):\r\n\t\t\tsolid.Add(geoE2)\r\n\t\t\r\n\t\telse:\r\n\t\t\tif isinstance(geoE2,GeometryInstance):\r\n\t\t\t\tgeoObj = geoE2.GetInstanceGeometry()\r\n\t\t\t\tfor s in geoObj:\r\n\t\t\t\t\tif isinstance(s,Solid) and s.Volume > 0:\r\n\t\t\t\t\t\tsolid.Add(s)\t\r\n\texcept Exceptyion, ex:\r\n\t\tmergedSolid.append(ex)\r\n\t\tpass\t\r\n\treturn solid\r\n####\r\ndef UnionSolid (solids):\r\n\tmergedSolid = []\r\n\ttry:\r\n\t\tif len(solids) == 0:\r\n\t\t\treturn null\r\n\t\tif len(solids) == 1:\r\n\t\t\treturn solids[0]\r\n\t\telse:\t\t\t\r\n\t\t\tfirst = solids[0]\r\n\t\t\tres = solids[1:]\r\n\t\t\tsecond = UnionSolid(res)\t\t\t\r\n\t\t\tmergedSolid = BooleanOperationsUtils.ExecuteBooleanOperation(first,second,BooleanOperationsType.Union)\r\n\texcept Exceptyion, ex:\r\n\t\tmergedSolid.append(ex)\r\n\t\tpass\r\n\treturn mergedSolid\r\n\r\ndef getRawVolume(solids):\r\n\tvol = 0\r\n\ttry:\r\n\t\tfor s in solids:\r\n\t\t\tvol += s.Volume*0.0283168\r\n\texcept:\t\r\n\t\tpass\r\n\treturn vol\r\n\r\ndef getSeftVolume(solids): #Intersect SOlids togeget\r\n\tmergedSolid = []\r\n\tvol = []\r\n\ttry:\r\n\t\tmergedSolid = UnionSolid(solids)\r\n\t\tvol = mergedSolid.Volume*0.0283168\r\n\texcept:\t\r\n\t\tpass\r\n\treturn vol\r\ndef exportSolidToSAT(app,msolid,path):\r\n\tres = []\r\n\t#FAMILY CREATION\r\n\tfamPath = app.FamilyTemplatePath + \"\\\\Conceptual Mass\\\\Metric Mass.rft\"\r\n\tfamdoc = app.NewFamilyDocument(famPath)\r\n\t#create Freeform by solid\r\n\twith Transaction(famdoc,\"Create Free Form\") as t:\r\n\t\tt.Start()\r\n\t\ttry:\t\r\n\t\t\tfreeFormElement = FreeFormElement.Create(famdoc,msolid)\r\n\t\texcept Exception, ex:\r\n\t\t\tres.append(ex)\r\n\t\t\tpass\r\n\t\tt.Commit()\r\n\ttempDir = tempfile.gettempdir()\r\n\ttempFamName = tempDir + \"\\\\temFamily\"+\".rfa\"\r\n\t#if os.path.isfile(tempFamName):\r\n\t\t#tempFamName = tempDir + \"\\\\temFamily\"+\"-\"+ msolid.UniqueId.ToString() +\".rfa\"\r\n\t\r\n\tsao = SaveAsOptions()\r\n\tsao.OverwriteExistingFile = True\r\n\tfamdoc.SaveAs(tempFamName,sao)\r\n\t\"\"\"\r\n\tsav = SaveOptions()\r\n\tfamdoc.Save(sav)\r\n\t\"\"\"\r\n\tviewFamTypes = FilteredElementCollector(famdoc).OfClass(ViewFamilyType)\r\n\tviewTypeID = 0\r\n\t\r\n\tfor vft in viewFamTypes:\r\n\t\tif vft.ViewFamily == ViewFamily.ThreeDimensional:\r\n\t\t\tviewTypeID = vft.Id\r\n\t\r\n\t#export SAT\r\n\twith Transaction(famdoc,\"Export SAT\") as tt:\r\n\t\ttt.Start()\r\n\t\tview3D = View3D.CreateIsometric(famdoc,viewTypeID)\r\n\t\ttt.Commit()\r\n\t\r\n\tviewSet = List[ElementId]()\r\n\tviewSet.Add(view3D.Id)\r\n\texportOptions=SATExportOptions()\r\n\tfamdoc.Export (path,\"SolidFile.sat\", viewSet, exportOptions)\r\n\treturn res\r\n\r\n\r\ndef readLinesDYNString(str):\r\n\tres = []\r\n\tfor s in catNames.split(\"\\n\"):\r\n\t\tres.append(s[:-1])\r\n\treturn res\r\n\r\ndef exportSolidToSATMulti(app,listmsolid,path):\r\n\t\r\n\tres = []\r\n\t#FAMILY CREATION\r\n\tfamPath = app.FamilyTemplatePath + \"\\\\Conceptual Mass\\\\Metric Mass.rft\"\r\n\tfamdoc = app.NewFamilyDocument(famPath)\t\r\n\ttempDir = tempfile.gettempdir()\r\n\ttempFamName = tempDir + \"\\\\temFamily\"+\".rfa\"\r\n\t#if os.path.isfile(tempFamName):\r\n\t\t#tempFamName = tempDir + \"\\\\temFamily\"+\"-\"+ msolid.UniqueId.ToString() +\".rfa\"\t\r\n\tsao = SaveAsOptions()\r\n\tsao.OverwriteExistingFile = True\r\n\tfamdoc.SaveAs(tempFamName,sao)\r\n\t\"\"\"\r\n\tsav = SaveOptions()\r\n\tfamdoc.Save(sav)\r\n\t\"\"\"\r\n\tviewFamTypes = FilteredElementCollector(famdoc).OfClass(ViewFamilyType)\r\n\tviewTypeID = 0\t\r\n\tfor vft in viewFamTypes:\r\n\t\tif vft.ViewFamily == ViewFamily.ThreeDimensional:\r\n\t\t\tviewTypeID = vft.Id\r\n\t\r\n\twith Transaction(famdoc,\"CreateView\") as tt:\r\n\t\ttt.Start()\r\n\t\tview3D = View3D.CreateIsometric(famdoc,viewTypeID)\r\n\t\ttt.Commit()\r\n\tviewSet = List[ElementId]()\r\n\tviewSet.Add(view3D.Id)\t\r\n\t\r\n\t#export SAT\r\n\t#create Freeform by solid\r\n\tfor i in range(len(listmsolid)):\r\n\t\tmsolid = listmsolid[i]\r\n\t\twith Transaction(famdoc,\"Create Free Form\") as t:\r\n\t\t\tt.Start()\r\n\t\t\ttry:\t\r\n\t\t\t\tfreeFormElement = FreeFormElement.Create(famdoc,msolid)\r\n\t\t\texcept Exception, ex:\r\n\t\t\t\tres.append(ex)\r\n\t\t\t\tpass\r\n\t\t\tt.Commit()\r\n\t\texportOptions=SATExportOptions()\r\n\t\tsatFN = \"Solid\" + \"-\" + str(i) +\".sat\"\r\n\t\tfamdoc.Export (path,satFN, viewSet, exportOptions)\r\n\t\twith Transaction(famdoc,\"Delete\") as ttt:\r\n\t\t\tttt.Start()\r\n\t\t\tif not os.path.isfile(path+\"\\\\\"+satFN):\r\n\t\t\t\tfamdoc.Delete(freeFormElement.Id)\t\r\n\t\t\tttt.Commit()\t\t\t\r\n\t\t\r\n\t\t#sav = SaveOptions()\r\n\t\t#famdoc.Save(sav)\r\n\t\tres.append(i)\t\r\n\t\r\n\treturn res\r\n\r\n###################################\r\n\r\ncatNames = IN[0] # use Dynamo String\r\npath = IN[1]\r\n\r\n\r\ncatName = readLinesDYNString(catNames)[1]#catNames.split(\"\\n\")[1][:-1] # get needed string\r\nres = []\r\ncat = []\r\n\r\nsolids = []\r\nvol = []\r\nres = allElemsOfCat(catName,doc)\r\n\r\nfor e in res:\r\n\tsolids.append(getSolids(e))\r\n\r\nv = getRawVolume(solids[0])\r\n\r\nmsolid = UnionSolid(solids[0])\r\n#res2 = exportSolidToSAT(app,msolid,path)\r\n\r\nmSolids = []\r\nfor s in solids:\r\n\tmSolids.append(UnionSolid(s))\r\n\t\r\nres3 = exportSolidToSATMulti(app,mSolids,path)\r\n#if os.path.isfile(tempFamName):#finally\r\n\t#os.remove(tempFamName)\r\n\r\n#MessageBox.Show('Hello')\r\n# Assign your output to the OUT variable.\r\nOUT = res3",
      "VariableInputPorts": true,
      "Id": "96a97850c8134df6807087ede023a8cf",
      "Inputs": [
        {
          "Id": "519d09acb08843d1885dae945f387984",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "25e6bce7a99e4b39878747ab6387f00c",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d7c40c847ddb49b19e64f173200c1c5e",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "C:\\Users\\USER\\Documents\\GitHub\\cofico\\BIM_master\\Dynamo\\2021",
      "Id": "587a8a3122bf40bbbf97e28799e1981d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "09b348044f584e828706e7b428fea990",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "4b8517ac34574ab0b4e17c523543b005",
      "Inputs": [
        {
          "Id": "57e11c1ac9b54561a516aded63e6e2bc",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dd7c6b61be3442bb922f1aef034ac5c3",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Structural Foundations\r\nStructural Columns\r\nWall\r\nStructural Framing\r\nFloor\r\nStairs\r\nRamp\r\nCeilings",
      "Id": "df132ae19ad549e093a7804a77792109",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "25200f5a361a43f7bc5580a0791ad6af",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nstr = IN[0]\r\n\r\nlines = str.split(\"\\n\")\r\n\r\n# Place your code below this line\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = lines",
      "VariableInputPorts": true,
      "Id": "9518ff59b90d40f9962ea694758aa868",
      "Inputs": [
        {
          "Id": "562298d092e84e749c3d62e8030a581a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ca694cf3088443db921fe04d862670f9",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import TaskDialog\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import *\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference('System.Windows.Forms')\r\nimport System.Windows.Forms\r\nfrom System.Windows.Forms import *\r\n\r\nclr.AddReference('System')\r\nfrom System.Collections.Generic import List\r\n##\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nopt = Options()\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nsolid=IN[0]\r\npath = IN[1]\r\n\r\n#FAMILY CREATION\r\n\r\nfamPath = app.FamilyTemplatePath + \"\\\\Conceptual Mass\\\\Metric Mass.rft\"\r\nfamdoc = app.NewFamilyDocument(famPath)\r\nTransactionManager.Instance.EnsureInTransaction(famdoc)\r\n#create Freeform by solid\r\ntry:\t\r\n\tfreeFormElement = famdoc.Create(family_doc, solid)\r\nexcept Exception, ex:\r\n\tstr = ex\r\n\tpass\r\nTransactionManager.Instance.TransactionTaskDone()\r\nfamdoc.Regenerate()\r\n\r\n\r\nsolidIDs = List[ElementId]()\r\nfor s in solids:\r\n\tsolidIDs.Add(ElementId(s.Id))\r\n# Place your code below this line\r\nview = doc.ActiveView\r\nviews = List[ElementId]()\r\nviews.Add(view.Id)\r\n\r\nexportOptions = SATExportOptions()\r\nres=[]\r\n# Start Transaction\r\nstr=\"\"\r\n\r\nTransactionManager.Instance.EnsureInTransaction(doc)\r\ntry:\t\r\n\tres.append(famdoc.Export(path,\"SolidFile.sat\",views,exportOptions))\r\nexcept Exception, ex:\r\n\tstr = ex\r\n\tpass\r\nTransactionManager.Instance.TransactionTaskDone()\r\ndoc.Regenerate()\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = famPath",
      "VariableInputPorts": true,
      "Id": "11778df925f9459c806e90775a10c63d",
      "Inputs": [
        {
          "Id": "73481fe3dea64b5589599b016c21d84b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d19c5411a82747a9998277e4a71cdac3",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "56f8b3ff22ab4631a98dc7f057e0cd96",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "res=list[1];",
      "Id": "35f56db7f6f844bdbbf99ca82d8d097d",
      "Inputs": [
        {
          "Id": "2c20b10c872e4461bc2b55e48bc5e51b",
          "Name": "list",
          "Description": "list",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e7694fe4951c495486b8b7ea59d2123b",
          "Name": "",
          "Description": "res",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "dab20e60053c44b883df7786b5092dd3",
      "Inputs": [
        {
          "Id": "c2ae448ecc03472b8c7d6961827bba02",
          "Name": "",
          "Description": "Node to evaluate.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2906b8c0c7534af4bc528c361e2bc7a3",
          "Name": "",
          "Description": "Watch contents.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the output of node."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Load the Python Standard and DesignScript Libraries\r\nimport sys\r\nimport os\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nclr.AddReference('RevitAPI')\r\nfrom Autodesk.Revit.DB import *\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import TaskDialog\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nfrom System.Collections.Generic import *\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\nclr.AddReference('System.Windows.Forms')\r\nimport System.Windows.Forms\r\nfrom System.Windows.Forms import *\r\nclr.AddReference('System')\r\nimport System\r\nfrom System.Collections.Generic import List\r\nfrom shutil import copyfile\r\nimport tempfile\r\nimport uuid\r\n##\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuiapp = DocumentManager.Instance.CurrentUIApplication\r\napp = uiapp.Application\r\nopt = Options()\r\n# The inputs to this node will be stored as a list in the IN variables.\r\ndataEnteringNode = IN\r\nsolid=IN[0]\r\npath = IN[1]\r\n\r\n\r\nstr\r\n\r\n\r\n#FAMILY CREATION\r\nfamPath = app.FamilyTemplatePath + \"\\\\Conceptual Mass\\\\Metric Mass.rft\"\r\nfamdoc = app.NewFamilyDocument(famPath)\r\n#create Freeform by solid\r\nwith Transaction(famdoc,\"Create Free Form\") as t:\r\n\tt.Start()\r\n\ttry:\t\r\n\t\tfreeFormElement = FreeFormElement.Create(famdoc,UnwrapElement(solid))\r\n\texcept Exception, ex:\r\n\t\tstr = ex\r\n\t\tpass\r\n\tt.Commit()\r\ntempDir = tempfile.gettempdir()\r\ntempFamName = tempDir + \"\\\\temFamily.rfa\"\r\nif os.path.isfile(tempFamName):\r\n\ttempFamName = tempDir + \"\\\\temFamily\"+\"-\"+uuid.uuid4().ToString()+\".rfa\"\r\n\"\"\"\r\nsao = SaveAsOptions()\r\nsao.OverwriteExistingFile = True\r\nfamdoc.SaveAs(tempFamName,sao)\r\n\r\nsav = SaveOptions()\r\nfamdoc.Save(sav)\r\n\"\"\"\r\nviewFamTypes = FilteredElementCollector(famdoc).OfClass(ViewFamilyType)\r\nviewTypeID = 0\r\n\r\nfor vft in viewFamTypes:\r\n\tif vft.ViewFamily == ViewFamily.ThreeDimensional:\r\n\t\tviewTypeID = vft.Id\r\n\r\n#export SAT\r\nwith Transaction(famdoc,\"Export SAT\") as tt:\r\n\ttt.Start()\r\n\tview3D = View3D.CreateIsometric(famdoc,viewTypeID)\r\n\ttt.Commit()\r\n\r\nviewSet = List[ElementId]()\r\nviewSet.Add(view3D.Id)\r\nexportOptions=SATExportOptions()\r\nfamdoc.Export (path,\"SolidFile.sat\", viewSet, exportOptions)\r\n\r\nif os.path.isfile(tempFamName):#finally\r\n\tos.remove(tempFamName)\r\n\r\n# Assign your output to the OUT variable.\r\nOUT = str",
      "VariableInputPorts": true,
      "Id": "9c58ef544d0240a4b78eec5965e1243d",
      "Inputs": [
        {
          "Id": "2ddcd6290dc34de2b5a1457a351fd93d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "11e8af4ffad94b2f9d1c1cac7d1b1f11",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6e29874200914ccaae50f7c80f57870d",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded IronPython script."
    }
  ],
  "Connectors": [
    {
      "Start": "d7c40c847ddb49b19e64f173200c1c5e",
      "End": "57e11c1ac9b54561a516aded63e6e2bc",
      "Id": "a98e31426ba848eaa47f7cf8d0db82e2"
    },
    {
      "Start": "d7c40c847ddb49b19e64f173200c1c5e",
      "End": "2c20b10c872e4461bc2b55e48bc5e51b",
      "Id": "e781b9d6da754f7cb2310bcfae563a2f"
    },
    {
      "Start": "09b348044f584e828706e7b428fea990",
      "End": "d19c5411a82747a9998277e4a71cdac3",
      "Id": "a1c853cf39194c9db49e3739048261c6"
    },
    {
      "Start": "09b348044f584e828706e7b428fea990",
      "End": "11e8af4ffad94b2f9d1c1cac7d1b1f11",
      "Id": "a7316f1c5b3341d5930fdf5ad35fe185"
    },
    {
      "Start": "09b348044f584e828706e7b428fea990",
      "End": "25e6bce7a99e4b39878747ab6387f00c",
      "Id": "cbb8889428c74b9da110095bdebee2b8"
    },
    {
      "Start": "25200f5a361a43f7bc5580a0791ad6af",
      "End": "562298d092e84e749c3d62e8030a581a",
      "Id": "978da4ced8ec4c36a77ca838b46cc5ca"
    },
    {
      "Start": "25200f5a361a43f7bc5580a0791ad6af",
      "End": "519d09acb08843d1885dae945f387984",
      "Id": "59ffa4fb4a4a43c5b5abd5f59d9abff8"
    },
    {
      "Start": "e7694fe4951c495486b8b7ea59d2123b",
      "End": "73481fe3dea64b5589599b016c21d84b",
      "Id": "b7fbb5e8ed7748909f9310b6784f3487"
    },
    {
      "Start": "e7694fe4951c495486b8b7ea59d2123b",
      "End": "2ddcd6290dc34de2b5a1457a351fd93d",
      "Id": "73f9bb54a19941129d339d766ebbba74"
    },
    {
      "Start": "6e29874200914ccaae50f7c80f57870d",
      "End": "c2ae448ecc03472b8c7d6961827bba02",
      "Id": "08063a40375e4764b121ab1a8f4bd7bb"
    }
  ],
  "Dependencies": [],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.1.0.7500",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Python Script-GetSolids",
        "Id": "96a97850c8134df6807087ede023a8cf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 230.78274395033498,
        "Y": 165.76571295172698
      },
      {
        "ShowGeometry": true,
        "Name": "Path",
        "Id": "587a8a3122bf40bbbf97e28799e1981d",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 87.801304245328708,
        "Y": 981.28847095650019
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "4b8517ac34574ab0b4e17c523543b005",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 673.77168393136742,
        "Y": 74.410330388583731
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "df132ae19ad549e093a7804a77792109",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -80.194301264556486,
        "Y": 116.47358802381856
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script- Read Dynamo String",
        "Id": "9518ff59b90d40f9962ea694758aa868",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 240.90625375992062,
        "Y": 549.61066856837408
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script-Export SAT",
        "Id": "11778df925f9459c806e90775a10c63d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 510.32981361883083,
        "Y": 791.69289637764837
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "35f56db7f6f844bdbbf99ca82d8d097d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 437.11876285609037,
        "Y": 412.55938142804519
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "dab20e60053c44b883df7786b5092dd3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 875.641626601986,
        "Y": 803.29952410800593
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script-Create Family Freeform by Solids",
        "Id": "9c58ef544d0240a4b78eec5965e1243d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": true,
        "X": 520.5732232447441,
        "Y": 1126.366456920905
      }
    ],
    "Annotations": [],
    "X": 25.840296898171289,
    "Y": 74.5313037288266,
    "Zoom": 1.0601367552295677
  }
}